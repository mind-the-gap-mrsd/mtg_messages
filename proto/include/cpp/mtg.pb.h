// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mtg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mtg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mtg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mtg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mtg_2eproto;
namespace mtg_fms {
class Accelerometer;
struct AccelerometerDefaultTypeInternal;
extern AccelerometerDefaultTypeInternal _Accelerometer_default_instance_;
class AgentStatus;
struct AgentStatusDefaultTypeInternal;
extern AgentStatusDefaultTypeInternal _AgentStatus_default_instance_;
class AllDetections;
struct AllDetectionsDefaultTypeInternal;
extern AllDetectionsDefaultTypeInternal _AllDetections_default_instance_;
class AprilTagDetection;
struct AprilTagDetectionDefaultTypeInternal;
extern AprilTagDetectionDefaultTypeInternal _AprilTagDetection_default_instance_;
class AprilTagPose;
struct AprilTagPoseDefaultTypeInternal;
extern AprilTagPoseDefaultTypeInternal _AprilTagPose_default_instance_;
class AprilTagRot;
struct AprilTagRotDefaultTypeInternal;
extern AprilTagRotDefaultTypeInternal _AprilTagRot_default_instance_;
class AprilTagTrans;
struct AprilTagTransDefaultTypeInternal;
extern AprilTagTransDefaultTypeInternal _AprilTagTrans_default_instance_;
class Encoder_count;
struct Encoder_countDefaultTypeInternal;
extern Encoder_countDefaultTypeInternal _Encoder_count_default_instance_;
class Encoder_speed;
struct Encoder_speedDefaultTypeInternal;
extern Encoder_speedDefaultTypeInternal _Encoder_speed_default_instance_;
class Gyroscope;
struct GyroscopeDefaultTypeInternal;
extern GyroscopeDefaultTypeInternal _Gyroscope_default_instance_;
class Infrared;
struct InfraredDefaultTypeInternal;
extern InfraredDefaultTypeInternal _Infrared_default_instance_;
class LaserScanner;
struct LaserScannerDefaultTypeInternal;
extern LaserScannerDefaultTypeInternal _LaserScanner_default_instance_;
class SensorData;
struct SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
class Ultrasonic;
struct UltrasonicDefaultTypeInternal;
extern UltrasonicDefaultTypeInternal _Ultrasonic_default_instance_;
}  // namespace mtg_fms
PROTOBUF_NAMESPACE_OPEN
template<> ::mtg_fms::Accelerometer* Arena::CreateMaybeMessage<::mtg_fms::Accelerometer>(Arena*);
template<> ::mtg_fms::AgentStatus* Arena::CreateMaybeMessage<::mtg_fms::AgentStatus>(Arena*);
template<> ::mtg_fms::AllDetections* Arena::CreateMaybeMessage<::mtg_fms::AllDetections>(Arena*);
template<> ::mtg_fms::AprilTagDetection* Arena::CreateMaybeMessage<::mtg_fms::AprilTagDetection>(Arena*);
template<> ::mtg_fms::AprilTagPose* Arena::CreateMaybeMessage<::mtg_fms::AprilTagPose>(Arena*);
template<> ::mtg_fms::AprilTagRot* Arena::CreateMaybeMessage<::mtg_fms::AprilTagRot>(Arena*);
template<> ::mtg_fms::AprilTagTrans* Arena::CreateMaybeMessage<::mtg_fms::AprilTagTrans>(Arena*);
template<> ::mtg_fms::Encoder_count* Arena::CreateMaybeMessage<::mtg_fms::Encoder_count>(Arena*);
template<> ::mtg_fms::Encoder_speed* Arena::CreateMaybeMessage<::mtg_fms::Encoder_speed>(Arena*);
template<> ::mtg_fms::Gyroscope* Arena::CreateMaybeMessage<::mtg_fms::Gyroscope>(Arena*);
template<> ::mtg_fms::Infrared* Arena::CreateMaybeMessage<::mtg_fms::Infrared>(Arena*);
template<> ::mtg_fms::LaserScanner* Arena::CreateMaybeMessage<::mtg_fms::LaserScanner>(Arena*);
template<> ::mtg_fms::SensorData* Arena::CreateMaybeMessage<::mtg_fms::SensorData>(Arena*);
template<> ::mtg_fms::Ultrasonic* Arena::CreateMaybeMessage<::mtg_fms::Ultrasonic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mtg_fms {

// ===================================================================

class Accelerometer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Accelerometer) */ {
 public:
  inline Accelerometer() : Accelerometer(nullptr) {}
  ~Accelerometer() override;
  explicit constexpr Accelerometer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Accelerometer(const Accelerometer& from);
  Accelerometer(Accelerometer&& from) noexcept
    : Accelerometer() {
    *this = ::std::move(from);
  }

  inline Accelerometer& operator=(const Accelerometer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accelerometer& operator=(Accelerometer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Accelerometer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Accelerometer* internal_default_instance() {
    return reinterpret_cast<const Accelerometer*>(
               &_Accelerometer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Accelerometer& a, Accelerometer& b) {
    a.Swap(&b);
  }
  inline void Swap(Accelerometer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accelerometer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accelerometer* New() const final {
    return new Accelerometer();
  }

  Accelerometer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accelerometer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accelerometer& from);
  void MergeFrom(const Accelerometer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accelerometer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.Accelerometer";
  }
  protected:
  explicit Accelerometer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccXFieldNumber = 1,
    kAccYFieldNumber = 2,
    kAccZFieldNumber = 3,
  };
  // required double acc_x = 1;
  bool has_acc_x() const;
  private:
  bool _internal_has_acc_x() const;
  public:
  void clear_acc_x();
  double acc_x() const;
  void set_acc_x(double value);
  private:
  double _internal_acc_x() const;
  void _internal_set_acc_x(double value);
  public:

  // required double acc_y = 2;
  bool has_acc_y() const;
  private:
  bool _internal_has_acc_y() const;
  public:
  void clear_acc_y();
  double acc_y() const;
  void set_acc_y(double value);
  private:
  double _internal_acc_y() const;
  void _internal_set_acc_y(double value);
  public:

  // required double acc_z = 3;
  bool has_acc_z() const;
  private:
  bool _internal_has_acc_z() const;
  public:
  void clear_acc_z();
  double acc_z() const;
  void set_acc_z(double value);
  private:
  double _internal_acc_z() const;
  void _internal_set_acc_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.Accelerometer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double acc_x_;
  double acc_y_;
  double acc_z_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class Ultrasonic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Ultrasonic) */ {
 public:
  inline Ultrasonic() : Ultrasonic(nullptr) {}
  ~Ultrasonic() override;
  explicit constexpr Ultrasonic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ultrasonic(const Ultrasonic& from);
  Ultrasonic(Ultrasonic&& from) noexcept
    : Ultrasonic() {
    *this = ::std::move(from);
  }

  inline Ultrasonic& operator=(const Ultrasonic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ultrasonic& operator=(Ultrasonic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ultrasonic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ultrasonic* internal_default_instance() {
    return reinterpret_cast<const Ultrasonic*>(
               &_Ultrasonic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ultrasonic& a, Ultrasonic& b) {
    a.Swap(&b);
  }
  inline void Swap(Ultrasonic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ultrasonic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ultrasonic* New() const final {
    return new Ultrasonic();
  }

  Ultrasonic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ultrasonic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ultrasonic& from);
  void MergeFrom(const Ultrasonic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ultrasonic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.Ultrasonic";
  }
  protected:
  explicit Ultrasonic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorAFieldNumber = 1,
    kSensorBFieldNumber = 2,
    kSensorCFieldNumber = 3,
    kSensorDFieldNumber = 4,
    kSensorEFieldNumber = 5,
  };
  // required uint32 sensor_a = 1;
  bool has_sensor_a() const;
  private:
  bool _internal_has_sensor_a() const;
  public:
  void clear_sensor_a();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_a() const;
  void set_sensor_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_a() const;
  void _internal_set_sensor_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_b = 2;
  bool has_sensor_b() const;
  private:
  bool _internal_has_sensor_b() const;
  public:
  void clear_sensor_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_b() const;
  void set_sensor_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_b() const;
  void _internal_set_sensor_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_c = 3;
  bool has_sensor_c() const;
  private:
  bool _internal_has_sensor_c() const;
  public:
  void clear_sensor_c();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_c() const;
  void set_sensor_c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_c() const;
  void _internal_set_sensor_c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_d = 4;
  bool has_sensor_d() const;
  private:
  bool _internal_has_sensor_d() const;
  public:
  void clear_sensor_d();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_d() const;
  void set_sensor_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_d() const;
  void _internal_set_sensor_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_e = 5;
  bool has_sensor_e() const;
  private:
  bool _internal_has_sensor_e() const;
  public:
  void clear_sensor_e();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_e() const;
  void set_sensor_e(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_e() const;
  void _internal_set_sensor_e(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.Ultrasonic)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_c_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_d_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_e_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class Infrared final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Infrared) */ {
 public:
  inline Infrared() : Infrared(nullptr) {}
  ~Infrared() override;
  explicit constexpr Infrared(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Infrared(const Infrared& from);
  Infrared(Infrared&& from) noexcept
    : Infrared() {
    *this = ::std::move(from);
  }

  inline Infrared& operator=(const Infrared& from) {
    CopyFrom(from);
    return *this;
  }
  inline Infrared& operator=(Infrared&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Infrared& default_instance() {
    return *internal_default_instance();
  }
  static inline const Infrared* internal_default_instance() {
    return reinterpret_cast<const Infrared*>(
               &_Infrared_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Infrared& a, Infrared& b) {
    a.Swap(&b);
  }
  inline void Swap(Infrared* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Infrared* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Infrared* New() const final {
    return new Infrared();
  }

  Infrared* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Infrared>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Infrared& from);
  void MergeFrom(const Infrared& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Infrared* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.Infrared";
  }
  protected:
  explicit Infrared(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorAFieldNumber = 1,
    kSensorBFieldNumber = 2,
    kSensorCFieldNumber = 3,
    kSensorDFieldNumber = 4,
    kSensorEFieldNumber = 5,
    kSensorFFieldNumber = 6,
    kSensorGFieldNumber = 7,
    kSensorHFieldNumber = 8,
    kSensorIFieldNumber = 9,
    kSensorJFieldNumber = 10,
    kSensorKFieldNumber = 11,
    kSensorLFieldNumber = 12,
  };
  // required uint32 sensor_a = 1;
  bool has_sensor_a() const;
  private:
  bool _internal_has_sensor_a() const;
  public:
  void clear_sensor_a();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_a() const;
  void set_sensor_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_a() const;
  void _internal_set_sensor_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_b = 2;
  bool has_sensor_b() const;
  private:
  bool _internal_has_sensor_b() const;
  public:
  void clear_sensor_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_b() const;
  void set_sensor_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_b() const;
  void _internal_set_sensor_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_c = 3;
  bool has_sensor_c() const;
  private:
  bool _internal_has_sensor_c() const;
  public:
  void clear_sensor_c();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_c() const;
  void set_sensor_c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_c() const;
  void _internal_set_sensor_c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_d = 4;
  bool has_sensor_d() const;
  private:
  bool _internal_has_sensor_d() const;
  public:
  void clear_sensor_d();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_d() const;
  void set_sensor_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_d() const;
  void _internal_set_sensor_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_e = 5;
  bool has_sensor_e() const;
  private:
  bool _internal_has_sensor_e() const;
  public:
  void clear_sensor_e();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_e() const;
  void set_sensor_e(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_e() const;
  void _internal_set_sensor_e(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_f = 6;
  bool has_sensor_f() const;
  private:
  bool _internal_has_sensor_f() const;
  public:
  void clear_sensor_f();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_f() const;
  void set_sensor_f(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_f() const;
  void _internal_set_sensor_f(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_g = 7;
  bool has_sensor_g() const;
  private:
  bool _internal_has_sensor_g() const;
  public:
  void clear_sensor_g();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_g() const;
  void set_sensor_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_g() const;
  void _internal_set_sensor_g(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_h = 8;
  bool has_sensor_h() const;
  private:
  bool _internal_has_sensor_h() const;
  public:
  void clear_sensor_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_h() const;
  void set_sensor_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_h() const;
  void _internal_set_sensor_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_i = 9;
  bool has_sensor_i() const;
  private:
  bool _internal_has_sensor_i() const;
  public:
  void clear_sensor_i();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_i() const;
  void set_sensor_i(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_i() const;
  void _internal_set_sensor_i(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_j = 10;
  bool has_sensor_j() const;
  private:
  bool _internal_has_sensor_j() const;
  public:
  void clear_sensor_j();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_j() const;
  void set_sensor_j(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_j() const;
  void _internal_set_sensor_j(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_k = 11;
  bool has_sensor_k() const;
  private:
  bool _internal_has_sensor_k() const;
  public:
  void clear_sensor_k();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_k() const;
  void set_sensor_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_k() const;
  void _internal_set_sensor_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sensor_l = 12;
  bool has_sensor_l() const;
  private:
  bool _internal_has_sensor_l() const;
  public:
  void clear_sensor_l();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_l() const;
  void set_sensor_l(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_l() const;
  void _internal_set_sensor_l(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.Infrared)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_c_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_d_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_e_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_f_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_g_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_h_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_i_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_j_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_k_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_l_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class Gyroscope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Gyroscope) */ {
 public:
  inline Gyroscope() : Gyroscope(nullptr) {}
  ~Gyroscope() override;
  explicit constexpr Gyroscope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gyroscope(const Gyroscope& from);
  Gyroscope(Gyroscope&& from) noexcept
    : Gyroscope() {
    *this = ::std::move(from);
  }

  inline Gyroscope& operator=(const Gyroscope& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gyroscope& operator=(Gyroscope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gyroscope& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gyroscope* internal_default_instance() {
    return reinterpret_cast<const Gyroscope*>(
               &_Gyroscope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Gyroscope& a, Gyroscope& b) {
    a.Swap(&b);
  }
  inline void Swap(Gyroscope* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gyroscope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gyroscope* New() const final {
    return new Gyroscope();
  }

  Gyroscope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gyroscope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gyroscope& from);
  void MergeFrom(const Gyroscope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gyroscope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.Gyroscope";
  }
  protected:
  explicit Gyroscope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGyroXFieldNumber = 1,
    kGyroYFieldNumber = 2,
    kGyroZFieldNumber = 3,
  };
  // required double gyro_x = 1;
  bool has_gyro_x() const;
  private:
  bool _internal_has_gyro_x() const;
  public:
  void clear_gyro_x();
  double gyro_x() const;
  void set_gyro_x(double value);
  private:
  double _internal_gyro_x() const;
  void _internal_set_gyro_x(double value);
  public:

  // required double gyro_y = 2;
  bool has_gyro_y() const;
  private:
  bool _internal_has_gyro_y() const;
  public:
  void clear_gyro_y();
  double gyro_y() const;
  void set_gyro_y(double value);
  private:
  double _internal_gyro_y() const;
  void _internal_set_gyro_y(double value);
  public:

  // required double gyro_z = 3;
  bool has_gyro_z() const;
  private:
  bool _internal_has_gyro_z() const;
  public:
  void clear_gyro_z();
  double gyro_z() const;
  void set_gyro_z(double value);
  private:
  double _internal_gyro_z() const;
  void _internal_set_gyro_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.Gyroscope)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double gyro_x_;
  double gyro_y_;
  double gyro_z_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class Encoder_count final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Encoder_count) */ {
 public:
  inline Encoder_count() : Encoder_count(nullptr) {}
  ~Encoder_count() override;
  explicit constexpr Encoder_count(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Encoder_count(const Encoder_count& from);
  Encoder_count(Encoder_count&& from) noexcept
    : Encoder_count() {
    *this = ::std::move(from);
  }

  inline Encoder_count& operator=(const Encoder_count& from) {
    CopyFrom(from);
    return *this;
  }
  inline Encoder_count& operator=(Encoder_count&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Encoder_count& default_instance() {
    return *internal_default_instance();
  }
  static inline const Encoder_count* internal_default_instance() {
    return reinterpret_cast<const Encoder_count*>(
               &_Encoder_count_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Encoder_count& a, Encoder_count& b) {
    a.Swap(&b);
  }
  inline void Swap(Encoder_count* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Encoder_count* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Encoder_count* New() const final {
    return new Encoder_count();
  }

  Encoder_count* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Encoder_count>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Encoder_count& from);
  void MergeFrom(const Encoder_count& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder_count* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.Encoder_count";
  }
  protected:
  explicit Encoder_count(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // required uint64 left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::uint64 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::uint64 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_right() const;
  void _internal_set_right(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.Encoder_count)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 left_;
  ::PROTOBUF_NAMESPACE_ID::uint64 right_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class Encoder_speed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Encoder_speed) */ {
 public:
  inline Encoder_speed() : Encoder_speed(nullptr) {}
  ~Encoder_speed() override;
  explicit constexpr Encoder_speed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Encoder_speed(const Encoder_speed& from);
  Encoder_speed(Encoder_speed&& from) noexcept
    : Encoder_speed() {
    *this = ::std::move(from);
  }

  inline Encoder_speed& operator=(const Encoder_speed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Encoder_speed& operator=(Encoder_speed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Encoder_speed& default_instance() {
    return *internal_default_instance();
  }
  static inline const Encoder_speed* internal_default_instance() {
    return reinterpret_cast<const Encoder_speed*>(
               &_Encoder_speed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Encoder_speed& a, Encoder_speed& b) {
    a.Swap(&b);
  }
  inline void Swap(Encoder_speed* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Encoder_speed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Encoder_speed* New() const final {
    return new Encoder_speed();
  }

  Encoder_speed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Encoder_speed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Encoder_speed& from);
  void MergeFrom(const Encoder_speed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder_speed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.Encoder_speed";
  }
  protected:
  explicit Encoder_speed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // required uint64 left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::uint64 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::uint64 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_right() const;
  void _internal_set_right(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.Encoder_speed)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 left_;
  ::PROTOBUF_NAMESPACE_ID::uint64 right_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class LaserScanner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.LaserScanner) */ {
 public:
  inline LaserScanner() : LaserScanner(nullptr) {}
  ~LaserScanner() override;
  explicit constexpr LaserScanner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaserScanner(const LaserScanner& from);
  LaserScanner(LaserScanner&& from) noexcept
    : LaserScanner() {
    *this = ::std::move(from);
  }

  inline LaserScanner& operator=(const LaserScanner& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserScanner& operator=(LaserScanner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaserScanner& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaserScanner* internal_default_instance() {
    return reinterpret_cast<const LaserScanner*>(
               &_LaserScanner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LaserScanner& a, LaserScanner& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserScanner* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserScanner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserScanner* New() const final {
    return new LaserScanner();
  }

  LaserScanner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserScanner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserScanner& from);
  void MergeFrom(const LaserScanner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserScanner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.LaserScanner";
  }
  protected:
  explicit LaserScanner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated uint64 values = 1 [packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:mtg_fms.LaserScanner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class AgentStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AgentStatus) */ {
 public:
  inline AgentStatus() : AgentStatus(nullptr) {}
  ~AgentStatus() override;
  explicit constexpr AgentStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentStatus(const AgentStatus& from);
  AgentStatus(AgentStatus&& from) noexcept
    : AgentStatus() {
    *this = ::std::move(from);
  }

  inline AgentStatus& operator=(const AgentStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentStatus& operator=(AgentStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentStatus* internal_default_instance() {
    return reinterpret_cast<const AgentStatus*>(
               &_AgentStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AgentStatus& a, AgentStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentStatus* New() const final {
    return new AgentStatus();
  }

  AgentStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentStatus& from);
  void MergeFrom(const AgentStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.AgentStatus";
  }
  protected:
  explicit AgentStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryLevelFieldNumber = 1,
  };
  // required uint64 battery_level = 1;
  bool has_battery_level() const;
  private:
  bool _internal_has_battery_level() const;
  public:
  void clear_battery_level();
  ::PROTOBUF_NAMESPACE_ID::uint64 battery_level() const;
  void set_battery_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_battery_level() const;
  void _internal_set_battery_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.AgentStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 battery_level_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class AprilTagRot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AprilTagRot) */ {
 public:
  inline AprilTagRot() : AprilTagRot(nullptr) {}
  ~AprilTagRot() override;
  explicit constexpr AprilTagRot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AprilTagRot(const AprilTagRot& from);
  AprilTagRot(AprilTagRot&& from) noexcept
    : AprilTagRot() {
    *this = ::std::move(from);
  }

  inline AprilTagRot& operator=(const AprilTagRot& from) {
    CopyFrom(from);
    return *this;
  }
  inline AprilTagRot& operator=(AprilTagRot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AprilTagRot& default_instance() {
    return *internal_default_instance();
  }
  static inline const AprilTagRot* internal_default_instance() {
    return reinterpret_cast<const AprilTagRot*>(
               &_AprilTagRot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AprilTagRot& a, AprilTagRot& b) {
    a.Swap(&b);
  }
  inline void Swap(AprilTagRot* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AprilTagRot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AprilTagRot* New() const final {
    return new AprilTagRot();
  }

  AprilTagRot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AprilTagRot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AprilTagRot& from);
  void MergeFrom(const AprilTagRot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AprilTagRot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.AprilTagRot";
  }
  protected:
  explicit AprilTagRot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kR11FieldNumber = 1,
    kR12FieldNumber = 2,
    kR13FieldNumber = 3,
    kR21FieldNumber = 4,
    kR22FieldNumber = 5,
    kR23FieldNumber = 6,
    kR31FieldNumber = 7,
    kR32FieldNumber = 8,
    kR33FieldNumber = 9,
  };
  // required double r11 = 1;
  bool has_r11() const;
  private:
  bool _internal_has_r11() const;
  public:
  void clear_r11();
  double r11() const;
  void set_r11(double value);
  private:
  double _internal_r11() const;
  void _internal_set_r11(double value);
  public:

  // required double r12 = 2;
  bool has_r12() const;
  private:
  bool _internal_has_r12() const;
  public:
  void clear_r12();
  double r12() const;
  void set_r12(double value);
  private:
  double _internal_r12() const;
  void _internal_set_r12(double value);
  public:

  // required double r13 = 3;
  bool has_r13() const;
  private:
  bool _internal_has_r13() const;
  public:
  void clear_r13();
  double r13() const;
  void set_r13(double value);
  private:
  double _internal_r13() const;
  void _internal_set_r13(double value);
  public:

  // required double r21 = 4;
  bool has_r21() const;
  private:
  bool _internal_has_r21() const;
  public:
  void clear_r21();
  double r21() const;
  void set_r21(double value);
  private:
  double _internal_r21() const;
  void _internal_set_r21(double value);
  public:

  // required double r22 = 5;
  bool has_r22() const;
  private:
  bool _internal_has_r22() const;
  public:
  void clear_r22();
  double r22() const;
  void set_r22(double value);
  private:
  double _internal_r22() const;
  void _internal_set_r22(double value);
  public:

  // required double r23 = 6;
  bool has_r23() const;
  private:
  bool _internal_has_r23() const;
  public:
  void clear_r23();
  double r23() const;
  void set_r23(double value);
  private:
  double _internal_r23() const;
  void _internal_set_r23(double value);
  public:

  // required double r31 = 7;
  bool has_r31() const;
  private:
  bool _internal_has_r31() const;
  public:
  void clear_r31();
  double r31() const;
  void set_r31(double value);
  private:
  double _internal_r31() const;
  void _internal_set_r31(double value);
  public:

  // required double r32 = 8;
  bool has_r32() const;
  private:
  bool _internal_has_r32() const;
  public:
  void clear_r32();
  double r32() const;
  void set_r32(double value);
  private:
  double _internal_r32() const;
  void _internal_set_r32(double value);
  public:

  // required double r33 = 9;
  bool has_r33() const;
  private:
  bool _internal_has_r33() const;
  public:
  void clear_r33();
  double r33() const;
  void set_r33(double value);
  private:
  double _internal_r33() const;
  void _internal_set_r33(double value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.AprilTagRot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double r11_;
  double r12_;
  double r13_;
  double r21_;
  double r22_;
  double r23_;
  double r31_;
  double r32_;
  double r33_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class AprilTagTrans final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AprilTagTrans) */ {
 public:
  inline AprilTagTrans() : AprilTagTrans(nullptr) {}
  ~AprilTagTrans() override;
  explicit constexpr AprilTagTrans(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AprilTagTrans(const AprilTagTrans& from);
  AprilTagTrans(AprilTagTrans&& from) noexcept
    : AprilTagTrans() {
    *this = ::std::move(from);
  }

  inline AprilTagTrans& operator=(const AprilTagTrans& from) {
    CopyFrom(from);
    return *this;
  }
  inline AprilTagTrans& operator=(AprilTagTrans&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AprilTagTrans& default_instance() {
    return *internal_default_instance();
  }
  static inline const AprilTagTrans* internal_default_instance() {
    return reinterpret_cast<const AprilTagTrans*>(
               &_AprilTagTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AprilTagTrans& a, AprilTagTrans& b) {
    a.Swap(&b);
  }
  inline void Swap(AprilTagTrans* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AprilTagTrans* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AprilTagTrans* New() const final {
    return new AprilTagTrans();
  }

  AprilTagTrans* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AprilTagTrans>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AprilTagTrans& from);
  void MergeFrom(const AprilTagTrans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AprilTagTrans* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.AprilTagTrans";
  }
  protected:
  explicit AprilTagTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.AprilTagTrans)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class AprilTagPose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AprilTagPose) */ {
 public:
  inline AprilTagPose() : AprilTagPose(nullptr) {}
  ~AprilTagPose() override;
  explicit constexpr AprilTagPose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AprilTagPose(const AprilTagPose& from);
  AprilTagPose(AprilTagPose&& from) noexcept
    : AprilTagPose() {
    *this = ::std::move(from);
  }

  inline AprilTagPose& operator=(const AprilTagPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline AprilTagPose& operator=(AprilTagPose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AprilTagPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const AprilTagPose* internal_default_instance() {
    return reinterpret_cast<const AprilTagPose*>(
               &_AprilTagPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AprilTagPose& a, AprilTagPose& b) {
    a.Swap(&b);
  }
  inline void Swap(AprilTagPose* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AprilTagPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AprilTagPose* New() const final {
    return new AprilTagPose();
  }

  AprilTagPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AprilTagPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AprilTagPose& from);
  void MergeFrom(const AprilTagPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AprilTagPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.AprilTagPose";
  }
  protected:
  explicit AprilTagPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kTFieldNumber = 2,
  };
  // required .mtg_fms.AprilTagRot R = 1;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  const ::mtg_fms::AprilTagRot& r() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::AprilTagRot* release_r();
  ::mtg_fms::AprilTagRot* mutable_r();
  void set_allocated_r(::mtg_fms::AprilTagRot* r);
  private:
  const ::mtg_fms::AprilTagRot& _internal_r() const;
  ::mtg_fms::AprilTagRot* _internal_mutable_r();
  public:
  void unsafe_arena_set_allocated_r(
      ::mtg_fms::AprilTagRot* r);
  ::mtg_fms::AprilTagRot* unsafe_arena_release_r();

  // required .mtg_fms.AprilTagTrans t = 2;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  const ::mtg_fms::AprilTagTrans& t() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::AprilTagTrans* release_t();
  ::mtg_fms::AprilTagTrans* mutable_t();
  void set_allocated_t(::mtg_fms::AprilTagTrans* t);
  private:
  const ::mtg_fms::AprilTagTrans& _internal_t() const;
  ::mtg_fms::AprilTagTrans* _internal_mutable_t();
  public:
  void unsafe_arena_set_allocated_t(
      ::mtg_fms::AprilTagTrans* t);
  ::mtg_fms::AprilTagTrans* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:mtg_fms.AprilTagPose)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mtg_fms::AprilTagRot* r_;
  ::mtg_fms::AprilTagTrans* t_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class AprilTagDetection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AprilTagDetection) */ {
 public:
  inline AprilTagDetection() : AprilTagDetection(nullptr) {}
  ~AprilTagDetection() override;
  explicit constexpr AprilTagDetection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AprilTagDetection(const AprilTagDetection& from);
  AprilTagDetection(AprilTagDetection&& from) noexcept
    : AprilTagDetection() {
    *this = ::std::move(from);
  }

  inline AprilTagDetection& operator=(const AprilTagDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline AprilTagDetection& operator=(AprilTagDetection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AprilTagDetection& default_instance() {
    return *internal_default_instance();
  }
  static inline const AprilTagDetection* internal_default_instance() {
    return reinterpret_cast<const AprilTagDetection*>(
               &_AprilTagDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AprilTagDetection& a, AprilTagDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(AprilTagDetection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AprilTagDetection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AprilTagDetection* New() const final {
    return new AprilTagDetection();
  }

  AprilTagDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AprilTagDetection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AprilTagDetection& from);
  void MergeFrom(const AprilTagDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AprilTagDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.AprilTagDetection";
  }
  protected:
  explicit AprilTagDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 2,
    kTagIdFieldNumber = 1,
  };
  // required .mtg_fms.AprilTagPose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::mtg_fms::AprilTagPose& pose() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::AprilTagPose* release_pose();
  ::mtg_fms::AprilTagPose* mutable_pose();
  void set_allocated_pose(::mtg_fms::AprilTagPose* pose);
  private:
  const ::mtg_fms::AprilTagPose& _internal_pose() const;
  ::mtg_fms::AprilTagPose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::mtg_fms::AprilTagPose* pose);
  ::mtg_fms::AprilTagPose* unsafe_arena_release_pose();

  // required uint32 tag_id = 1;
  bool has_tag_id() const;
  private:
  bool _internal_has_tag_id() const;
  public:
  void clear_tag_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_id() const;
  void set_tag_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag_id() const;
  void _internal_set_tag_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.AprilTagDetection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mtg_fms::AprilTagPose* pose_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_id_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class AllDetections final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AllDetections) */ {
 public:
  inline AllDetections() : AllDetections(nullptr) {}
  ~AllDetections() override;
  explicit constexpr AllDetections(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllDetections(const AllDetections& from);
  AllDetections(AllDetections&& from) noexcept
    : AllDetections() {
    *this = ::std::move(from);
  }

  inline AllDetections& operator=(const AllDetections& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllDetections& operator=(AllDetections&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllDetections& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllDetections* internal_default_instance() {
    return reinterpret_cast<const AllDetections*>(
               &_AllDetections_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AllDetections& a, AllDetections& b) {
    a.Swap(&b);
  }
  inline void Swap(AllDetections* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllDetections* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllDetections* New() const final {
    return new AllDetections();
  }

  AllDetections* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllDetections>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllDetections& from);
  void MergeFrom(const AllDetections& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllDetections* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.AllDetections";
  }
  protected:
  explicit AllDetections(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagDetectionsFieldNumber = 1,
  };
  // repeated .mtg_fms.AprilTagDetection tag_detections = 1;
  int tag_detections_size() const;
  private:
  int _internal_tag_detections_size() const;
  public:
  void clear_tag_detections();
  ::mtg_fms::AprilTagDetection* mutable_tag_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mtg_fms::AprilTagDetection >*
      mutable_tag_detections();
  private:
  const ::mtg_fms::AprilTagDetection& _internal_tag_detections(int index) const;
  ::mtg_fms::AprilTagDetection* _internal_add_tag_detections();
  public:
  const ::mtg_fms::AprilTagDetection& tag_detections(int index) const;
  ::mtg_fms::AprilTagDetection* add_tag_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mtg_fms::AprilTagDetection >&
      tag_detections() const;

  // @@protoc_insertion_point(class_scope:mtg_fms.AllDetections)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mtg_fms::AprilTagDetection > tag_detections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mtg_2eproto;
};
// -------------------------------------------------------------------

class SensorData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mtg_fms.SensorData) */ {
 public:
  inline SensorData() : SensorData(nullptr) {}
  ~SensorData() override;
  explicit constexpr SensorData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SensorData(const SensorData& from);
  SensorData(SensorData&& from) noexcept
    : SensorData() {
    *this = ::std::move(from);
  }

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorData& operator=(SensorData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorData* internal_default_instance() {
    return reinterpret_cast<const SensorData*>(
               &_SensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SensorData& a, SensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorData* New() const final {
    return new SensorData();
  }

  SensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorData& from);
  void MergeFrom(const SensorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mtg_fms.SensorData";
  }
  protected:
  explicit SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelDataFieldNumber = 3,
    kGyroDataFieldNumber = 4,
    kCountDataFieldNumber = 5,
    kSpeedDataFieldNumber = 6,
    kIrDataFieldNumber = 7,
    kUsDataFieldNumber = 8,
    kLrfDataFieldNumber = 9,
    kAgentStatusDataFieldNumber = 10,
    kAprilDetectionsFieldNumber = 11,
    kTimestampNsFieldNumber = 1,
    kSeqIdFieldNumber = 2,
  };
  // required .mtg_fms.Accelerometer accel_data = 3;
  bool has_accel_data() const;
  private:
  bool _internal_has_accel_data() const;
  public:
  void clear_accel_data();
  const ::mtg_fms::Accelerometer& accel_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::Accelerometer* release_accel_data();
  ::mtg_fms::Accelerometer* mutable_accel_data();
  void set_allocated_accel_data(::mtg_fms::Accelerometer* accel_data);
  private:
  const ::mtg_fms::Accelerometer& _internal_accel_data() const;
  ::mtg_fms::Accelerometer* _internal_mutable_accel_data();
  public:
  void unsafe_arena_set_allocated_accel_data(
      ::mtg_fms::Accelerometer* accel_data);
  ::mtg_fms::Accelerometer* unsafe_arena_release_accel_data();

  // required .mtg_fms.Gyroscope gyro_data = 4;
  bool has_gyro_data() const;
  private:
  bool _internal_has_gyro_data() const;
  public:
  void clear_gyro_data();
  const ::mtg_fms::Gyroscope& gyro_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::Gyroscope* release_gyro_data();
  ::mtg_fms::Gyroscope* mutable_gyro_data();
  void set_allocated_gyro_data(::mtg_fms::Gyroscope* gyro_data);
  private:
  const ::mtg_fms::Gyroscope& _internal_gyro_data() const;
  ::mtg_fms::Gyroscope* _internal_mutable_gyro_data();
  public:
  void unsafe_arena_set_allocated_gyro_data(
      ::mtg_fms::Gyroscope* gyro_data);
  ::mtg_fms::Gyroscope* unsafe_arena_release_gyro_data();

  // required .mtg_fms.Encoder_count count_data = 5;
  bool has_count_data() const;
  private:
  bool _internal_has_count_data() const;
  public:
  void clear_count_data();
  const ::mtg_fms::Encoder_count& count_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::Encoder_count* release_count_data();
  ::mtg_fms::Encoder_count* mutable_count_data();
  void set_allocated_count_data(::mtg_fms::Encoder_count* count_data);
  private:
  const ::mtg_fms::Encoder_count& _internal_count_data() const;
  ::mtg_fms::Encoder_count* _internal_mutable_count_data();
  public:
  void unsafe_arena_set_allocated_count_data(
      ::mtg_fms::Encoder_count* count_data);
  ::mtg_fms::Encoder_count* unsafe_arena_release_count_data();

  // required .mtg_fms.Encoder_speed speed_data = 6;
  bool has_speed_data() const;
  private:
  bool _internal_has_speed_data() const;
  public:
  void clear_speed_data();
  const ::mtg_fms::Encoder_speed& speed_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::Encoder_speed* release_speed_data();
  ::mtg_fms::Encoder_speed* mutable_speed_data();
  void set_allocated_speed_data(::mtg_fms::Encoder_speed* speed_data);
  private:
  const ::mtg_fms::Encoder_speed& _internal_speed_data() const;
  ::mtg_fms::Encoder_speed* _internal_mutable_speed_data();
  public:
  void unsafe_arena_set_allocated_speed_data(
      ::mtg_fms::Encoder_speed* speed_data);
  ::mtg_fms::Encoder_speed* unsafe_arena_release_speed_data();

  // required .mtg_fms.Infrared ir_data = 7;
  bool has_ir_data() const;
  private:
  bool _internal_has_ir_data() const;
  public:
  void clear_ir_data();
  const ::mtg_fms::Infrared& ir_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::Infrared* release_ir_data();
  ::mtg_fms::Infrared* mutable_ir_data();
  void set_allocated_ir_data(::mtg_fms::Infrared* ir_data);
  private:
  const ::mtg_fms::Infrared& _internal_ir_data() const;
  ::mtg_fms::Infrared* _internal_mutable_ir_data();
  public:
  void unsafe_arena_set_allocated_ir_data(
      ::mtg_fms::Infrared* ir_data);
  ::mtg_fms::Infrared* unsafe_arena_release_ir_data();

  // required .mtg_fms.Ultrasonic us_data = 8;
  bool has_us_data() const;
  private:
  bool _internal_has_us_data() const;
  public:
  void clear_us_data();
  const ::mtg_fms::Ultrasonic& us_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::Ultrasonic* release_us_data();
  ::mtg_fms::Ultrasonic* mutable_us_data();
  void set_allocated_us_data(::mtg_fms::Ultrasonic* us_data);
  private:
  const ::mtg_fms::Ultrasonic& _internal_us_data() const;
  ::mtg_fms::Ultrasonic* _internal_mutable_us_data();
  public:
  void unsafe_arena_set_allocated_us_data(
      ::mtg_fms::Ultrasonic* us_data);
  ::mtg_fms::Ultrasonic* unsafe_arena_release_us_data();

  // required .mtg_fms.LaserScanner lrf_data = 9;
  bool has_lrf_data() const;
  private:
  bool _internal_has_lrf_data() const;
  public:
  void clear_lrf_data();
  const ::mtg_fms::LaserScanner& lrf_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::LaserScanner* release_lrf_data();
  ::mtg_fms::LaserScanner* mutable_lrf_data();
  void set_allocated_lrf_data(::mtg_fms::LaserScanner* lrf_data);
  private:
  const ::mtg_fms::LaserScanner& _internal_lrf_data() const;
  ::mtg_fms::LaserScanner* _internal_mutable_lrf_data();
  public:
  void unsafe_arena_set_allocated_lrf_data(
      ::mtg_fms::LaserScanner* lrf_data);
  ::mtg_fms::LaserScanner* unsafe_arena_release_lrf_data();

  // required .mtg_fms.AgentStatus agent_status_data = 10;
  bool has_agent_status_data() const;
  private:
  bool _internal_has_agent_status_data() const;
  public:
  void clear_agent_status_data();
  const ::mtg_fms::AgentStatus& agent_status_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::AgentStatus* release_agent_status_data();
  ::mtg_fms::AgentStatus* mutable_agent_status_data();
  void set_allocated_agent_status_data(::mtg_fms::AgentStatus* agent_status_data);
  private:
  const ::mtg_fms::AgentStatus& _internal_agent_status_data() const;
  ::mtg_fms::AgentStatus* _internal_mutable_agent_status_data();
  public:
  void unsafe_arena_set_allocated_agent_status_data(
      ::mtg_fms::AgentStatus* agent_status_data);
  ::mtg_fms::AgentStatus* unsafe_arena_release_agent_status_data();

  // required .mtg_fms.AllDetections april_detections = 11;
  bool has_april_detections() const;
  private:
  bool _internal_has_april_detections() const;
  public:
  void clear_april_detections();
  const ::mtg_fms::AllDetections& april_detections() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::mtg_fms::AllDetections* release_april_detections();
  ::mtg_fms::AllDetections* mutable_april_detections();
  void set_allocated_april_detections(::mtg_fms::AllDetections* april_detections);
  private:
  const ::mtg_fms::AllDetections& _internal_april_detections() const;
  ::mtg_fms::AllDetections* _internal_mutable_april_detections();
  public:
  void unsafe_arena_set_allocated_april_detections(
      ::mtg_fms::AllDetections* april_detections);
  ::mtg_fms::AllDetections* unsafe_arena_release_april_detections();

  // required uint64 timestamp_ns = 1;
  bool has_timestamp_ns() const;
  private:
  bool _internal_has_timestamp_ns() const;
  public:
  void clear_timestamp_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ns() const;
  void set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_ns() const;
  void _internal_set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 seq_id = 2;
  bool has_seq_id() const;
  private:
  bool _internal_has_seq_id() const;
  public:
  void clear_seq_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_id() const;
  void set_seq_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq_id() const;
  void _internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mtg_fms.SensorData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mtg_fms::Accelerometer* accel_data_;
  ::mtg_fms::Gyroscope* gyro_data_;
  ::mtg_fms::Encoder_count* count_data_;
  ::mtg_fms::Encoder_speed* speed_data_;
  ::mtg_fms::Infrared* ir_data_;
  ::mtg_fms::Ultrasonic* us_data_;
  ::mtg_fms::LaserScanner* lrf_data_;
  ::mtg_fms::AgentStatus* agent_status_data_;
  ::mtg_fms::AllDetections* april_detections_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_id_;
  friend struct ::TableStruct_mtg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Accelerometer

// required double acc_x = 1;
inline bool Accelerometer::_internal_has_acc_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Accelerometer::has_acc_x() const {
  return _internal_has_acc_x();
}
inline void Accelerometer::clear_acc_x() {
  acc_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Accelerometer::_internal_acc_x() const {
  return acc_x_;
}
inline double Accelerometer::acc_x() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Accelerometer.acc_x)
  return _internal_acc_x();
}
inline void Accelerometer::_internal_set_acc_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  acc_x_ = value;
}
inline void Accelerometer::set_acc_x(double value) {
  _internal_set_acc_x(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Accelerometer.acc_x)
}

// required double acc_y = 2;
inline bool Accelerometer::_internal_has_acc_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Accelerometer::has_acc_y() const {
  return _internal_has_acc_y();
}
inline void Accelerometer::clear_acc_y() {
  acc_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Accelerometer::_internal_acc_y() const {
  return acc_y_;
}
inline double Accelerometer::acc_y() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Accelerometer.acc_y)
  return _internal_acc_y();
}
inline void Accelerometer::_internal_set_acc_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  acc_y_ = value;
}
inline void Accelerometer::set_acc_y(double value) {
  _internal_set_acc_y(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Accelerometer.acc_y)
}

// required double acc_z = 3;
inline bool Accelerometer::_internal_has_acc_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Accelerometer::has_acc_z() const {
  return _internal_has_acc_z();
}
inline void Accelerometer::clear_acc_z() {
  acc_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Accelerometer::_internal_acc_z() const {
  return acc_z_;
}
inline double Accelerometer::acc_z() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Accelerometer.acc_z)
  return _internal_acc_z();
}
inline void Accelerometer::_internal_set_acc_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  acc_z_ = value;
}
inline void Accelerometer::set_acc_z(double value) {
  _internal_set_acc_z(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Accelerometer.acc_z)
}

// -------------------------------------------------------------------

// Ultrasonic

// required uint32 sensor_a = 1;
inline bool Ultrasonic::_internal_has_sensor_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ultrasonic::has_sensor_a() const {
  return _internal_has_sensor_a();
}
inline void Ultrasonic::clear_sensor_a() {
  sensor_a_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::_internal_sensor_a() const {
  return sensor_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::sensor_a() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_a)
  return _internal_sensor_a();
}
inline void Ultrasonic::_internal_set_sensor_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_a_ = value;
}
inline void Ultrasonic::set_sensor_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_a(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_a)
}

// required uint32 sensor_b = 2;
inline bool Ultrasonic::_internal_has_sensor_b() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ultrasonic::has_sensor_b() const {
  return _internal_has_sensor_b();
}
inline void Ultrasonic::clear_sensor_b() {
  sensor_b_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::_internal_sensor_b() const {
  return sensor_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::sensor_b() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_b)
  return _internal_sensor_b();
}
inline void Ultrasonic::_internal_set_sensor_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sensor_b_ = value;
}
inline void Ultrasonic::set_sensor_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_b(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_b)
}

// required uint32 sensor_c = 3;
inline bool Ultrasonic::_internal_has_sensor_c() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ultrasonic::has_sensor_c() const {
  return _internal_has_sensor_c();
}
inline void Ultrasonic::clear_sensor_c() {
  sensor_c_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::_internal_sensor_c() const {
  return sensor_c_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::sensor_c() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_c)
  return _internal_sensor_c();
}
inline void Ultrasonic::_internal_set_sensor_c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sensor_c_ = value;
}
inline void Ultrasonic::set_sensor_c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_c(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_c)
}

// required uint32 sensor_d = 4;
inline bool Ultrasonic::_internal_has_sensor_d() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ultrasonic::has_sensor_d() const {
  return _internal_has_sensor_d();
}
inline void Ultrasonic::clear_sensor_d() {
  sensor_d_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::_internal_sensor_d() const {
  return sensor_d_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::sensor_d() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_d)
  return _internal_sensor_d();
}
inline void Ultrasonic::_internal_set_sensor_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  sensor_d_ = value;
}
inline void Ultrasonic::set_sensor_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_d(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_d)
}

// required uint32 sensor_e = 5;
inline bool Ultrasonic::_internal_has_sensor_e() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ultrasonic::has_sensor_e() const {
  return _internal_has_sensor_e();
}
inline void Ultrasonic::clear_sensor_e() {
  sensor_e_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::_internal_sensor_e() const {
  return sensor_e_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ultrasonic::sensor_e() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_e)
  return _internal_sensor_e();
}
inline void Ultrasonic::_internal_set_sensor_e(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  sensor_e_ = value;
}
inline void Ultrasonic::set_sensor_e(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_e(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_e)
}

// -------------------------------------------------------------------

// Infrared

// required uint32 sensor_a = 1;
inline bool Infrared::_internal_has_sensor_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Infrared::has_sensor_a() const {
  return _internal_has_sensor_a();
}
inline void Infrared::clear_sensor_a() {
  sensor_a_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_a() const {
  return sensor_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_a() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_a)
  return _internal_sensor_a();
}
inline void Infrared::_internal_set_sensor_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_a_ = value;
}
inline void Infrared::set_sensor_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_a(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_a)
}

// required uint32 sensor_b = 2;
inline bool Infrared::_internal_has_sensor_b() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Infrared::has_sensor_b() const {
  return _internal_has_sensor_b();
}
inline void Infrared::clear_sensor_b() {
  sensor_b_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_b() const {
  return sensor_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_b() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_b)
  return _internal_sensor_b();
}
inline void Infrared::_internal_set_sensor_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sensor_b_ = value;
}
inline void Infrared::set_sensor_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_b(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_b)
}

// required uint32 sensor_c = 3;
inline bool Infrared::_internal_has_sensor_c() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Infrared::has_sensor_c() const {
  return _internal_has_sensor_c();
}
inline void Infrared::clear_sensor_c() {
  sensor_c_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_c() const {
  return sensor_c_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_c() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_c)
  return _internal_sensor_c();
}
inline void Infrared::_internal_set_sensor_c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sensor_c_ = value;
}
inline void Infrared::set_sensor_c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_c(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_c)
}

// required uint32 sensor_d = 4;
inline bool Infrared::_internal_has_sensor_d() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Infrared::has_sensor_d() const {
  return _internal_has_sensor_d();
}
inline void Infrared::clear_sensor_d() {
  sensor_d_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_d() const {
  return sensor_d_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_d() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_d)
  return _internal_sensor_d();
}
inline void Infrared::_internal_set_sensor_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  sensor_d_ = value;
}
inline void Infrared::set_sensor_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_d(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_d)
}

// required uint32 sensor_e = 5;
inline bool Infrared::_internal_has_sensor_e() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Infrared::has_sensor_e() const {
  return _internal_has_sensor_e();
}
inline void Infrared::clear_sensor_e() {
  sensor_e_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_e() const {
  return sensor_e_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_e() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_e)
  return _internal_sensor_e();
}
inline void Infrared::_internal_set_sensor_e(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  sensor_e_ = value;
}
inline void Infrared::set_sensor_e(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_e(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_e)
}

// required uint32 sensor_f = 6;
inline bool Infrared::_internal_has_sensor_f() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Infrared::has_sensor_f() const {
  return _internal_has_sensor_f();
}
inline void Infrared::clear_sensor_f() {
  sensor_f_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_f() const {
  return sensor_f_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_f() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_f)
  return _internal_sensor_f();
}
inline void Infrared::_internal_set_sensor_f(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  sensor_f_ = value;
}
inline void Infrared::set_sensor_f(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_f(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_f)
}

// required uint32 sensor_g = 7;
inline bool Infrared::_internal_has_sensor_g() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Infrared::has_sensor_g() const {
  return _internal_has_sensor_g();
}
inline void Infrared::clear_sensor_g() {
  sensor_g_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_g() const {
  return sensor_g_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_g() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_g)
  return _internal_sensor_g();
}
inline void Infrared::_internal_set_sensor_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  sensor_g_ = value;
}
inline void Infrared::set_sensor_g(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_g(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_g)
}

// required uint32 sensor_h = 8;
inline bool Infrared::_internal_has_sensor_h() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Infrared::has_sensor_h() const {
  return _internal_has_sensor_h();
}
inline void Infrared::clear_sensor_h() {
  sensor_h_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_h() const {
  return sensor_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_h() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_h)
  return _internal_sensor_h();
}
inline void Infrared::_internal_set_sensor_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  sensor_h_ = value;
}
inline void Infrared::set_sensor_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_h(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_h)
}

// required uint32 sensor_i = 9;
inline bool Infrared::_internal_has_sensor_i() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Infrared::has_sensor_i() const {
  return _internal_has_sensor_i();
}
inline void Infrared::clear_sensor_i() {
  sensor_i_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_i() const {
  return sensor_i_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_i() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_i)
  return _internal_sensor_i();
}
inline void Infrared::_internal_set_sensor_i(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  sensor_i_ = value;
}
inline void Infrared::set_sensor_i(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_i(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_i)
}

// required uint32 sensor_j = 10;
inline bool Infrared::_internal_has_sensor_j() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Infrared::has_sensor_j() const {
  return _internal_has_sensor_j();
}
inline void Infrared::clear_sensor_j() {
  sensor_j_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_j() const {
  return sensor_j_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_j() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_j)
  return _internal_sensor_j();
}
inline void Infrared::_internal_set_sensor_j(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  sensor_j_ = value;
}
inline void Infrared::set_sensor_j(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_j(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_j)
}

// required uint32 sensor_k = 11;
inline bool Infrared::_internal_has_sensor_k() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Infrared::has_sensor_k() const {
  return _internal_has_sensor_k();
}
inline void Infrared::clear_sensor_k() {
  sensor_k_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_k() const {
  return sensor_k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_k() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_k)
  return _internal_sensor_k();
}
inline void Infrared::_internal_set_sensor_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  sensor_k_ = value;
}
inline void Infrared::set_sensor_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_k(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_k)
}

// required uint32 sensor_l = 12;
inline bool Infrared::_internal_has_sensor_l() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Infrared::has_sensor_l() const {
  return _internal_has_sensor_l();
}
inline void Infrared::clear_sensor_l() {
  sensor_l_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::_internal_sensor_l() const {
  return sensor_l_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Infrared::sensor_l() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_l)
  return _internal_sensor_l();
}
inline void Infrared::_internal_set_sensor_l(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  sensor_l_ = value;
}
inline void Infrared::set_sensor_l(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_l(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_l)
}

// -------------------------------------------------------------------

// Gyroscope

// required double gyro_x = 1;
inline bool Gyroscope::_internal_has_gyro_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Gyroscope::has_gyro_x() const {
  return _internal_has_gyro_x();
}
inline void Gyroscope::clear_gyro_x() {
  gyro_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Gyroscope::_internal_gyro_x() const {
  return gyro_x_;
}
inline double Gyroscope::gyro_x() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Gyroscope.gyro_x)
  return _internal_gyro_x();
}
inline void Gyroscope::_internal_set_gyro_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  gyro_x_ = value;
}
inline void Gyroscope::set_gyro_x(double value) {
  _internal_set_gyro_x(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Gyroscope.gyro_x)
}

// required double gyro_y = 2;
inline bool Gyroscope::_internal_has_gyro_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Gyroscope::has_gyro_y() const {
  return _internal_has_gyro_y();
}
inline void Gyroscope::clear_gyro_y() {
  gyro_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Gyroscope::_internal_gyro_y() const {
  return gyro_y_;
}
inline double Gyroscope::gyro_y() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Gyroscope.gyro_y)
  return _internal_gyro_y();
}
inline void Gyroscope::_internal_set_gyro_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  gyro_y_ = value;
}
inline void Gyroscope::set_gyro_y(double value) {
  _internal_set_gyro_y(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Gyroscope.gyro_y)
}

// required double gyro_z = 3;
inline bool Gyroscope::_internal_has_gyro_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Gyroscope::has_gyro_z() const {
  return _internal_has_gyro_z();
}
inline void Gyroscope::clear_gyro_z() {
  gyro_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Gyroscope::_internal_gyro_z() const {
  return gyro_z_;
}
inline double Gyroscope::gyro_z() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Gyroscope.gyro_z)
  return _internal_gyro_z();
}
inline void Gyroscope::_internal_set_gyro_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  gyro_z_ = value;
}
inline void Gyroscope::set_gyro_z(double value) {
  _internal_set_gyro_z(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Gyroscope.gyro_z)
}

// -------------------------------------------------------------------

// Encoder_count

// required uint64 left = 1;
inline bool Encoder_count::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Encoder_count::has_left() const {
  return _internal_has_left();
}
inline void Encoder_count::clear_left() {
  left_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Encoder_count::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Encoder_count::left() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Encoder_count.left)
  return _internal_left();
}
inline void Encoder_count::_internal_set_left(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void Encoder_count::set_left(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Encoder_count.left)
}

// required uint64 right = 2;
inline bool Encoder_count::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Encoder_count::has_right() const {
  return _internal_has_right();
}
inline void Encoder_count::clear_right() {
  right_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Encoder_count::_internal_right() const {
  return right_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Encoder_count::right() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Encoder_count.right)
  return _internal_right();
}
inline void Encoder_count::_internal_set_right(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  right_ = value;
}
inline void Encoder_count::set_right(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Encoder_count.right)
}

// -------------------------------------------------------------------

// Encoder_speed

// required uint64 left = 1;
inline bool Encoder_speed::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Encoder_speed::has_left() const {
  return _internal_has_left();
}
inline void Encoder_speed::clear_left() {
  left_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Encoder_speed::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Encoder_speed::left() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Encoder_speed.left)
  return _internal_left();
}
inline void Encoder_speed::_internal_set_left(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void Encoder_speed::set_left(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Encoder_speed.left)
}

// required uint64 right = 2;
inline bool Encoder_speed::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Encoder_speed::has_right() const {
  return _internal_has_right();
}
inline void Encoder_speed::clear_right() {
  right_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Encoder_speed::_internal_right() const {
  return right_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Encoder_speed::right() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Encoder_speed.right)
  return _internal_right();
}
inline void Encoder_speed::_internal_set_right(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  right_ = value;
}
inline void Encoder_speed::set_right(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:mtg_fms.Encoder_speed.right)
}

// -------------------------------------------------------------------

// LaserScanner

// repeated uint64 values = 1 [packed = true];
inline int LaserScanner::_internal_values_size() const {
  return values_.size();
}
inline int LaserScanner::values_size() const {
  return _internal_values_size();
}
inline void LaserScanner::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaserScanner::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaserScanner::values(int index) const {
  // @@protoc_insertion_point(field_get:mtg_fms.LaserScanner.values)
  return _internal_values(index);
}
inline void LaserScanner::set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:mtg_fms.LaserScanner.values)
}
inline void LaserScanner::_internal_add_values(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  values_.Add(value);
}
inline void LaserScanner::add_values(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:mtg_fms.LaserScanner.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LaserScanner::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LaserScanner::values() const {
  // @@protoc_insertion_point(field_list:mtg_fms.LaserScanner.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LaserScanner::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LaserScanner::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:mtg_fms.LaserScanner.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// AgentStatus

// required uint64 battery_level = 1;
inline bool AgentStatus::_internal_has_battery_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AgentStatus::has_battery_level() const {
  return _internal_has_battery_level();
}
inline void AgentStatus::clear_battery_level() {
  battery_level_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentStatus::_internal_battery_level() const {
  return battery_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentStatus::battery_level() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AgentStatus.battery_level)
  return _internal_battery_level();
}
inline void AgentStatus::_internal_set_battery_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  battery_level_ = value;
}
inline void AgentStatus::set_battery_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_battery_level(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AgentStatus.battery_level)
}

// -------------------------------------------------------------------

// AprilTagRot

// required double r11 = 1;
inline bool AprilTagRot::_internal_has_r11() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AprilTagRot::has_r11() const {
  return _internal_has_r11();
}
inline void AprilTagRot::clear_r11() {
  r11_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double AprilTagRot::_internal_r11() const {
  return r11_;
}
inline double AprilTagRot::r11() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r11)
  return _internal_r11();
}
inline void AprilTagRot::_internal_set_r11(double value) {
  _has_bits_[0] |= 0x00000001u;
  r11_ = value;
}
inline void AprilTagRot::set_r11(double value) {
  _internal_set_r11(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r11)
}

// required double r12 = 2;
inline bool AprilTagRot::_internal_has_r12() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AprilTagRot::has_r12() const {
  return _internal_has_r12();
}
inline void AprilTagRot::clear_r12() {
  r12_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double AprilTagRot::_internal_r12() const {
  return r12_;
}
inline double AprilTagRot::r12() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r12)
  return _internal_r12();
}
inline void AprilTagRot::_internal_set_r12(double value) {
  _has_bits_[0] |= 0x00000002u;
  r12_ = value;
}
inline void AprilTagRot::set_r12(double value) {
  _internal_set_r12(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r12)
}

// required double r13 = 3;
inline bool AprilTagRot::_internal_has_r13() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AprilTagRot::has_r13() const {
  return _internal_has_r13();
}
inline void AprilTagRot::clear_r13() {
  r13_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double AprilTagRot::_internal_r13() const {
  return r13_;
}
inline double AprilTagRot::r13() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r13)
  return _internal_r13();
}
inline void AprilTagRot::_internal_set_r13(double value) {
  _has_bits_[0] |= 0x00000004u;
  r13_ = value;
}
inline void AprilTagRot::set_r13(double value) {
  _internal_set_r13(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r13)
}

// required double r21 = 4;
inline bool AprilTagRot::_internal_has_r21() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AprilTagRot::has_r21() const {
  return _internal_has_r21();
}
inline void AprilTagRot::clear_r21() {
  r21_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double AprilTagRot::_internal_r21() const {
  return r21_;
}
inline double AprilTagRot::r21() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r21)
  return _internal_r21();
}
inline void AprilTagRot::_internal_set_r21(double value) {
  _has_bits_[0] |= 0x00000008u;
  r21_ = value;
}
inline void AprilTagRot::set_r21(double value) {
  _internal_set_r21(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r21)
}

// required double r22 = 5;
inline bool AprilTagRot::_internal_has_r22() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AprilTagRot::has_r22() const {
  return _internal_has_r22();
}
inline void AprilTagRot::clear_r22() {
  r22_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double AprilTagRot::_internal_r22() const {
  return r22_;
}
inline double AprilTagRot::r22() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r22)
  return _internal_r22();
}
inline void AprilTagRot::_internal_set_r22(double value) {
  _has_bits_[0] |= 0x00000010u;
  r22_ = value;
}
inline void AprilTagRot::set_r22(double value) {
  _internal_set_r22(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r22)
}

// required double r23 = 6;
inline bool AprilTagRot::_internal_has_r23() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AprilTagRot::has_r23() const {
  return _internal_has_r23();
}
inline void AprilTagRot::clear_r23() {
  r23_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double AprilTagRot::_internal_r23() const {
  return r23_;
}
inline double AprilTagRot::r23() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r23)
  return _internal_r23();
}
inline void AprilTagRot::_internal_set_r23(double value) {
  _has_bits_[0] |= 0x00000020u;
  r23_ = value;
}
inline void AprilTagRot::set_r23(double value) {
  _internal_set_r23(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r23)
}

// required double r31 = 7;
inline bool AprilTagRot::_internal_has_r31() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AprilTagRot::has_r31() const {
  return _internal_has_r31();
}
inline void AprilTagRot::clear_r31() {
  r31_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double AprilTagRot::_internal_r31() const {
  return r31_;
}
inline double AprilTagRot::r31() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r31)
  return _internal_r31();
}
inline void AprilTagRot::_internal_set_r31(double value) {
  _has_bits_[0] |= 0x00000040u;
  r31_ = value;
}
inline void AprilTagRot::set_r31(double value) {
  _internal_set_r31(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r31)
}

// required double r32 = 8;
inline bool AprilTagRot::_internal_has_r32() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AprilTagRot::has_r32() const {
  return _internal_has_r32();
}
inline void AprilTagRot::clear_r32() {
  r32_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double AprilTagRot::_internal_r32() const {
  return r32_;
}
inline double AprilTagRot::r32() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r32)
  return _internal_r32();
}
inline void AprilTagRot::_internal_set_r32(double value) {
  _has_bits_[0] |= 0x00000080u;
  r32_ = value;
}
inline void AprilTagRot::set_r32(double value) {
  _internal_set_r32(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r32)
}

// required double r33 = 9;
inline bool AprilTagRot::_internal_has_r33() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AprilTagRot::has_r33() const {
  return _internal_has_r33();
}
inline void AprilTagRot::clear_r33() {
  r33_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double AprilTagRot::_internal_r33() const {
  return r33_;
}
inline double AprilTagRot::r33() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r33)
  return _internal_r33();
}
inline void AprilTagRot::_internal_set_r33(double value) {
  _has_bits_[0] |= 0x00000100u;
  r33_ = value;
}
inline void AprilTagRot::set_r33(double value) {
  _internal_set_r33(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r33)
}

// -------------------------------------------------------------------

// AprilTagTrans

// required double x = 1;
inline bool AprilTagTrans::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AprilTagTrans::has_x() const {
  return _internal_has_x();
}
inline void AprilTagTrans::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double AprilTagTrans::_internal_x() const {
  return x_;
}
inline double AprilTagTrans::x() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagTrans.x)
  return _internal_x();
}
inline void AprilTagTrans::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void AprilTagTrans::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagTrans.x)
}

// required double y = 2;
inline bool AprilTagTrans::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AprilTagTrans::has_y() const {
  return _internal_has_y();
}
inline void AprilTagTrans::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double AprilTagTrans::_internal_y() const {
  return y_;
}
inline double AprilTagTrans::y() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagTrans.y)
  return _internal_y();
}
inline void AprilTagTrans::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void AprilTagTrans::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagTrans.y)
}

// required double z = 3;
inline bool AprilTagTrans::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AprilTagTrans::has_z() const {
  return _internal_has_z();
}
inline void AprilTagTrans::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double AprilTagTrans::_internal_z() const {
  return z_;
}
inline double AprilTagTrans::z() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagTrans.z)
  return _internal_z();
}
inline void AprilTagTrans::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void AprilTagTrans::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagTrans.z)
}

// -------------------------------------------------------------------

// AprilTagPose

// required .mtg_fms.AprilTagRot R = 1;
inline bool AprilTagPose::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || r_ != nullptr);
  return value;
}
inline bool AprilTagPose::has_r() const {
  return _internal_has_r();
}
inline void AprilTagPose::clear_r() {
  if (r_ != nullptr) r_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mtg_fms::AprilTagRot& AprilTagPose::_internal_r() const {
  const ::mtg_fms::AprilTagRot* p = r_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::AprilTagRot&>(
      ::mtg_fms::_AprilTagRot_default_instance_);
}
inline const ::mtg_fms::AprilTagRot& AprilTagPose::r() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagPose.R)
  return _internal_r();
}
inline void AprilTagPose::unsafe_arena_set_allocated_r(
    ::mtg_fms::AprilTagRot* r) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(r_);
  }
  r_ = r;
  if (r) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.AprilTagPose.R)
}
inline ::mtg_fms::AprilTagRot* AprilTagPose::release_r() {
  _has_bits_[0] &= ~0x00000001u;
  ::mtg_fms::AprilTagRot* temp = r_;
  r_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::AprilTagRot* AprilTagPose::unsafe_arena_release_r() {
  // @@protoc_insertion_point(field_release:mtg_fms.AprilTagPose.R)
  _has_bits_[0] &= ~0x00000001u;
  ::mtg_fms::AprilTagRot* temp = r_;
  r_ = nullptr;
  return temp;
}
inline ::mtg_fms::AprilTagRot* AprilTagPose::_internal_mutable_r() {
  _has_bits_[0] |= 0x00000001u;
  if (r_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::AprilTagRot>(GetArenaForAllocation());
    r_ = p;
  }
  return r_;
}
inline ::mtg_fms::AprilTagRot* AprilTagPose::mutable_r() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.AprilTagPose.R)
  return _internal_mutable_r();
}
inline void AprilTagPose::set_allocated_r(::mtg_fms::AprilTagRot* r) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete r_;
  }
  if (r) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::AprilTagRot>::GetOwningArena(r);
    if (message_arena != submessage_arena) {
      r = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, r, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  r_ = r;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.AprilTagPose.R)
}

// required .mtg_fms.AprilTagTrans t = 2;
inline bool AprilTagPose::_internal_has_t() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || t_ != nullptr);
  return value;
}
inline bool AprilTagPose::has_t() const {
  return _internal_has_t();
}
inline void AprilTagPose::clear_t() {
  if (t_ != nullptr) t_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mtg_fms::AprilTagTrans& AprilTagPose::_internal_t() const {
  const ::mtg_fms::AprilTagTrans* p = t_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::AprilTagTrans&>(
      ::mtg_fms::_AprilTagTrans_default_instance_);
}
inline const ::mtg_fms::AprilTagTrans& AprilTagPose::t() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagPose.t)
  return _internal_t();
}
inline void AprilTagPose::unsafe_arena_set_allocated_t(
    ::mtg_fms::AprilTagTrans* t) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(t_);
  }
  t_ = t;
  if (t) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.AprilTagPose.t)
}
inline ::mtg_fms::AprilTagTrans* AprilTagPose::release_t() {
  _has_bits_[0] &= ~0x00000002u;
  ::mtg_fms::AprilTagTrans* temp = t_;
  t_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::AprilTagTrans* AprilTagPose::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_release:mtg_fms.AprilTagPose.t)
  _has_bits_[0] &= ~0x00000002u;
  ::mtg_fms::AprilTagTrans* temp = t_;
  t_ = nullptr;
  return temp;
}
inline ::mtg_fms::AprilTagTrans* AprilTagPose::_internal_mutable_t() {
  _has_bits_[0] |= 0x00000002u;
  if (t_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::AprilTagTrans>(GetArenaForAllocation());
    t_ = p;
  }
  return t_;
}
inline ::mtg_fms::AprilTagTrans* AprilTagPose::mutable_t() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.AprilTagPose.t)
  return _internal_mutable_t();
}
inline void AprilTagPose::set_allocated_t(::mtg_fms::AprilTagTrans* t) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete t_;
  }
  if (t) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::AprilTagTrans>::GetOwningArena(t);
    if (message_arena != submessage_arena) {
      t = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.AprilTagPose.t)
}

// -------------------------------------------------------------------

// AprilTagDetection

// required uint32 tag_id = 1;
inline bool AprilTagDetection::_internal_has_tag_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AprilTagDetection::has_tag_id() const {
  return _internal_has_tag_id();
}
inline void AprilTagDetection::clear_tag_id() {
  tag_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AprilTagDetection::_internal_tag_id() const {
  return tag_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AprilTagDetection::tag_id() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagDetection.tag_id)
  return _internal_tag_id();
}
inline void AprilTagDetection::_internal_set_tag_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tag_id_ = value;
}
inline void AprilTagDetection::set_tag_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag_id(value);
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagDetection.tag_id)
}

// required .mtg_fms.AprilTagPose pose = 2;
inline bool AprilTagDetection::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool AprilTagDetection::has_pose() const {
  return _internal_has_pose();
}
inline void AprilTagDetection::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mtg_fms::AprilTagPose& AprilTagDetection::_internal_pose() const {
  const ::mtg_fms::AprilTagPose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::AprilTagPose&>(
      ::mtg_fms::_AprilTagPose_default_instance_);
}
inline const ::mtg_fms::AprilTagPose& AprilTagDetection::pose() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagDetection.pose)
  return _internal_pose();
}
inline void AprilTagDetection::unsafe_arena_set_allocated_pose(
    ::mtg_fms::AprilTagPose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.AprilTagDetection.pose)
}
inline ::mtg_fms::AprilTagPose* AprilTagDetection::release_pose() {
  _has_bits_[0] &= ~0x00000001u;
  ::mtg_fms::AprilTagPose* temp = pose_;
  pose_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::AprilTagPose* AprilTagDetection::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:mtg_fms.AprilTagDetection.pose)
  _has_bits_[0] &= ~0x00000001u;
  ::mtg_fms::AprilTagPose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::mtg_fms::AprilTagPose* AprilTagDetection::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000001u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::AprilTagPose>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::mtg_fms::AprilTagPose* AprilTagDetection::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.AprilTagDetection.pose)
  return _internal_mutable_pose();
}
inline void AprilTagDetection::set_allocated_pose(::mtg_fms::AprilTagPose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::AprilTagPose>::GetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.AprilTagDetection.pose)
}

// -------------------------------------------------------------------

// AllDetections

// repeated .mtg_fms.AprilTagDetection tag_detections = 1;
inline int AllDetections::_internal_tag_detections_size() const {
  return tag_detections_.size();
}
inline int AllDetections::tag_detections_size() const {
  return _internal_tag_detections_size();
}
inline void AllDetections::clear_tag_detections() {
  tag_detections_.Clear();
}
inline ::mtg_fms::AprilTagDetection* AllDetections::mutable_tag_detections(int index) {
  // @@protoc_insertion_point(field_mutable:mtg_fms.AllDetections.tag_detections)
  return tag_detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mtg_fms::AprilTagDetection >*
AllDetections::mutable_tag_detections() {
  // @@protoc_insertion_point(field_mutable_list:mtg_fms.AllDetections.tag_detections)
  return &tag_detections_;
}
inline const ::mtg_fms::AprilTagDetection& AllDetections::_internal_tag_detections(int index) const {
  return tag_detections_.Get(index);
}
inline const ::mtg_fms::AprilTagDetection& AllDetections::tag_detections(int index) const {
  // @@protoc_insertion_point(field_get:mtg_fms.AllDetections.tag_detections)
  return _internal_tag_detections(index);
}
inline ::mtg_fms::AprilTagDetection* AllDetections::_internal_add_tag_detections() {
  return tag_detections_.Add();
}
inline ::mtg_fms::AprilTagDetection* AllDetections::add_tag_detections() {
  // @@protoc_insertion_point(field_add:mtg_fms.AllDetections.tag_detections)
  return _internal_add_tag_detections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mtg_fms::AprilTagDetection >&
AllDetections::tag_detections() const {
  // @@protoc_insertion_point(field_list:mtg_fms.AllDetections.tag_detections)
  return tag_detections_;
}

// -------------------------------------------------------------------

// SensorData

// required uint64 timestamp_ns = 1;
inline bool SensorData::_internal_has_timestamp_ns() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SensorData::has_timestamp_ns() const {
  return _internal_has_timestamp_ns();
}
inline void SensorData::clear_timestamp_ns() {
  timestamp_ns_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SensorData::_internal_timestamp_ns() const {
  return timestamp_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SensorData::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.timestamp_ns)
  return _internal_timestamp_ns();
}
inline void SensorData::_internal_set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  timestamp_ns_ = value;
}
inline void SensorData::set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_ns(value);
  // @@protoc_insertion_point(field_set:mtg_fms.SensorData.timestamp_ns)
}

// required uint32 seq_id = 2;
inline bool SensorData::_internal_has_seq_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SensorData::has_seq_id() const {
  return _internal_has_seq_id();
}
inline void SensorData::clear_seq_id() {
  seq_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorData::_internal_seq_id() const {
  return seq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SensorData::seq_id() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.seq_id)
  return _internal_seq_id();
}
inline void SensorData::_internal_set_seq_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  seq_id_ = value;
}
inline void SensorData::set_seq_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:mtg_fms.SensorData.seq_id)
}

// required .mtg_fms.Accelerometer accel_data = 3;
inline bool SensorData::_internal_has_accel_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || accel_data_ != nullptr);
  return value;
}
inline bool SensorData::has_accel_data() const {
  return _internal_has_accel_data();
}
inline void SensorData::clear_accel_data() {
  if (accel_data_ != nullptr) accel_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mtg_fms::Accelerometer& SensorData::_internal_accel_data() const {
  const ::mtg_fms::Accelerometer* p = accel_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::Accelerometer&>(
      ::mtg_fms::_Accelerometer_default_instance_);
}
inline const ::mtg_fms::Accelerometer& SensorData::accel_data() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.accel_data)
  return _internal_accel_data();
}
inline void SensorData::unsafe_arena_set_allocated_accel_data(
    ::mtg_fms::Accelerometer* accel_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_data_);
  }
  accel_data_ = accel_data;
  if (accel_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.SensorData.accel_data)
}
inline ::mtg_fms::Accelerometer* SensorData::release_accel_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::mtg_fms::Accelerometer* temp = accel_data_;
  accel_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::Accelerometer* SensorData::unsafe_arena_release_accel_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.accel_data)
  _has_bits_[0] &= ~0x00000001u;
  ::mtg_fms::Accelerometer* temp = accel_data_;
  accel_data_ = nullptr;
  return temp;
}
inline ::mtg_fms::Accelerometer* SensorData::_internal_mutable_accel_data() {
  _has_bits_[0] |= 0x00000001u;
  if (accel_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::Accelerometer>(GetArenaForAllocation());
    accel_data_ = p;
  }
  return accel_data_;
}
inline ::mtg_fms::Accelerometer* SensorData::mutable_accel_data() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.accel_data)
  return _internal_mutable_accel_data();
}
inline void SensorData::set_allocated_accel_data(::mtg_fms::Accelerometer* accel_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete accel_data_;
  }
  if (accel_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::Accelerometer>::GetOwningArena(accel_data);
    if (message_arena != submessage_arena) {
      accel_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  accel_data_ = accel_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.accel_data)
}

// required .mtg_fms.Gyroscope gyro_data = 4;
inline bool SensorData::_internal_has_gyro_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gyro_data_ != nullptr);
  return value;
}
inline bool SensorData::has_gyro_data() const {
  return _internal_has_gyro_data();
}
inline void SensorData::clear_gyro_data() {
  if (gyro_data_ != nullptr) gyro_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mtg_fms::Gyroscope& SensorData::_internal_gyro_data() const {
  const ::mtg_fms::Gyroscope* p = gyro_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::Gyroscope&>(
      ::mtg_fms::_Gyroscope_default_instance_);
}
inline const ::mtg_fms::Gyroscope& SensorData::gyro_data() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.gyro_data)
  return _internal_gyro_data();
}
inline void SensorData::unsafe_arena_set_allocated_gyro_data(
    ::mtg_fms::Gyroscope* gyro_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyro_data_);
  }
  gyro_data_ = gyro_data;
  if (gyro_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.SensorData.gyro_data)
}
inline ::mtg_fms::Gyroscope* SensorData::release_gyro_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::mtg_fms::Gyroscope* temp = gyro_data_;
  gyro_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::Gyroscope* SensorData::unsafe_arena_release_gyro_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.gyro_data)
  _has_bits_[0] &= ~0x00000002u;
  ::mtg_fms::Gyroscope* temp = gyro_data_;
  gyro_data_ = nullptr;
  return temp;
}
inline ::mtg_fms::Gyroscope* SensorData::_internal_mutable_gyro_data() {
  _has_bits_[0] |= 0x00000002u;
  if (gyro_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::Gyroscope>(GetArenaForAllocation());
    gyro_data_ = p;
  }
  return gyro_data_;
}
inline ::mtg_fms::Gyroscope* SensorData::mutable_gyro_data() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.gyro_data)
  return _internal_mutable_gyro_data();
}
inline void SensorData::set_allocated_gyro_data(::mtg_fms::Gyroscope* gyro_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gyro_data_;
  }
  if (gyro_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::Gyroscope>::GetOwningArena(gyro_data);
    if (message_arena != submessage_arena) {
      gyro_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyro_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gyro_data_ = gyro_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.gyro_data)
}

// required .mtg_fms.Encoder_count count_data = 5;
inline bool SensorData::_internal_has_count_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || count_data_ != nullptr);
  return value;
}
inline bool SensorData::has_count_data() const {
  return _internal_has_count_data();
}
inline void SensorData::clear_count_data() {
  if (count_data_ != nullptr) count_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mtg_fms::Encoder_count& SensorData::_internal_count_data() const {
  const ::mtg_fms::Encoder_count* p = count_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::Encoder_count&>(
      ::mtg_fms::_Encoder_count_default_instance_);
}
inline const ::mtg_fms::Encoder_count& SensorData::count_data() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.count_data)
  return _internal_count_data();
}
inline void SensorData::unsafe_arena_set_allocated_count_data(
    ::mtg_fms::Encoder_count* count_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(count_data_);
  }
  count_data_ = count_data;
  if (count_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.SensorData.count_data)
}
inline ::mtg_fms::Encoder_count* SensorData::release_count_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::mtg_fms::Encoder_count* temp = count_data_;
  count_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::Encoder_count* SensorData::unsafe_arena_release_count_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.count_data)
  _has_bits_[0] &= ~0x00000004u;
  ::mtg_fms::Encoder_count* temp = count_data_;
  count_data_ = nullptr;
  return temp;
}
inline ::mtg_fms::Encoder_count* SensorData::_internal_mutable_count_data() {
  _has_bits_[0] |= 0x00000004u;
  if (count_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::Encoder_count>(GetArenaForAllocation());
    count_data_ = p;
  }
  return count_data_;
}
inline ::mtg_fms::Encoder_count* SensorData::mutable_count_data() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.count_data)
  return _internal_mutable_count_data();
}
inline void SensorData::set_allocated_count_data(::mtg_fms::Encoder_count* count_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete count_data_;
  }
  if (count_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::Encoder_count>::GetOwningArena(count_data);
    if (message_arena != submessage_arena) {
      count_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  count_data_ = count_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.count_data)
}

// required .mtg_fms.Encoder_speed speed_data = 6;
inline bool SensorData::_internal_has_speed_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || speed_data_ != nullptr);
  return value;
}
inline bool SensorData::has_speed_data() const {
  return _internal_has_speed_data();
}
inline void SensorData::clear_speed_data() {
  if (speed_data_ != nullptr) speed_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mtg_fms::Encoder_speed& SensorData::_internal_speed_data() const {
  const ::mtg_fms::Encoder_speed* p = speed_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::Encoder_speed&>(
      ::mtg_fms::_Encoder_speed_default_instance_);
}
inline const ::mtg_fms::Encoder_speed& SensorData::speed_data() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.speed_data)
  return _internal_speed_data();
}
inline void SensorData::unsafe_arena_set_allocated_speed_data(
    ::mtg_fms::Encoder_speed* speed_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_data_);
  }
  speed_data_ = speed_data;
  if (speed_data) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.SensorData.speed_data)
}
inline ::mtg_fms::Encoder_speed* SensorData::release_speed_data() {
  _has_bits_[0] &= ~0x00000008u;
  ::mtg_fms::Encoder_speed* temp = speed_data_;
  speed_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::Encoder_speed* SensorData::unsafe_arena_release_speed_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.speed_data)
  _has_bits_[0] &= ~0x00000008u;
  ::mtg_fms::Encoder_speed* temp = speed_data_;
  speed_data_ = nullptr;
  return temp;
}
inline ::mtg_fms::Encoder_speed* SensorData::_internal_mutable_speed_data() {
  _has_bits_[0] |= 0x00000008u;
  if (speed_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::Encoder_speed>(GetArenaForAllocation());
    speed_data_ = p;
  }
  return speed_data_;
}
inline ::mtg_fms::Encoder_speed* SensorData::mutable_speed_data() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.speed_data)
  return _internal_mutable_speed_data();
}
inline void SensorData::set_allocated_speed_data(::mtg_fms::Encoder_speed* speed_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete speed_data_;
  }
  if (speed_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::Encoder_speed>::GetOwningArena(speed_data);
    if (message_arena != submessage_arena) {
      speed_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  speed_data_ = speed_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.speed_data)
}

// required .mtg_fms.Infrared ir_data = 7;
inline bool SensorData::_internal_has_ir_data() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || ir_data_ != nullptr);
  return value;
}
inline bool SensorData::has_ir_data() const {
  return _internal_has_ir_data();
}
inline void SensorData::clear_ir_data() {
  if (ir_data_ != nullptr) ir_data_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mtg_fms::Infrared& SensorData::_internal_ir_data() const {
  const ::mtg_fms::Infrared* p = ir_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::Infrared&>(
      ::mtg_fms::_Infrared_default_instance_);
}
inline const ::mtg_fms::Infrared& SensorData::ir_data() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.ir_data)
  return _internal_ir_data();
}
inline void SensorData::unsafe_arena_set_allocated_ir_data(
    ::mtg_fms::Infrared* ir_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ir_data_);
  }
  ir_data_ = ir_data;
  if (ir_data) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.SensorData.ir_data)
}
inline ::mtg_fms::Infrared* SensorData::release_ir_data() {
  _has_bits_[0] &= ~0x00000010u;
  ::mtg_fms::Infrared* temp = ir_data_;
  ir_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::Infrared* SensorData::unsafe_arena_release_ir_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.ir_data)
  _has_bits_[0] &= ~0x00000010u;
  ::mtg_fms::Infrared* temp = ir_data_;
  ir_data_ = nullptr;
  return temp;
}
inline ::mtg_fms::Infrared* SensorData::_internal_mutable_ir_data() {
  _has_bits_[0] |= 0x00000010u;
  if (ir_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::Infrared>(GetArenaForAllocation());
    ir_data_ = p;
  }
  return ir_data_;
}
inline ::mtg_fms::Infrared* SensorData::mutable_ir_data() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.ir_data)
  return _internal_mutable_ir_data();
}
inline void SensorData::set_allocated_ir_data(::mtg_fms::Infrared* ir_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ir_data_;
  }
  if (ir_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::Infrared>::GetOwningArena(ir_data);
    if (message_arena != submessage_arena) {
      ir_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ir_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ir_data_ = ir_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.ir_data)
}

// required .mtg_fms.Ultrasonic us_data = 8;
inline bool SensorData::_internal_has_us_data() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || us_data_ != nullptr);
  return value;
}
inline bool SensorData::has_us_data() const {
  return _internal_has_us_data();
}
inline void SensorData::clear_us_data() {
  if (us_data_ != nullptr) us_data_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mtg_fms::Ultrasonic& SensorData::_internal_us_data() const {
  const ::mtg_fms::Ultrasonic* p = us_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::Ultrasonic&>(
      ::mtg_fms::_Ultrasonic_default_instance_);
}
inline const ::mtg_fms::Ultrasonic& SensorData::us_data() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.us_data)
  return _internal_us_data();
}
inline void SensorData::unsafe_arena_set_allocated_us_data(
    ::mtg_fms::Ultrasonic* us_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(us_data_);
  }
  us_data_ = us_data;
  if (us_data) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.SensorData.us_data)
}
inline ::mtg_fms::Ultrasonic* SensorData::release_us_data() {
  _has_bits_[0] &= ~0x00000020u;
  ::mtg_fms::Ultrasonic* temp = us_data_;
  us_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::Ultrasonic* SensorData::unsafe_arena_release_us_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.us_data)
  _has_bits_[0] &= ~0x00000020u;
  ::mtg_fms::Ultrasonic* temp = us_data_;
  us_data_ = nullptr;
  return temp;
}
inline ::mtg_fms::Ultrasonic* SensorData::_internal_mutable_us_data() {
  _has_bits_[0] |= 0x00000020u;
  if (us_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::Ultrasonic>(GetArenaForAllocation());
    us_data_ = p;
  }
  return us_data_;
}
inline ::mtg_fms::Ultrasonic* SensorData::mutable_us_data() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.us_data)
  return _internal_mutable_us_data();
}
inline void SensorData::set_allocated_us_data(::mtg_fms::Ultrasonic* us_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete us_data_;
  }
  if (us_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::Ultrasonic>::GetOwningArena(us_data);
    if (message_arena != submessage_arena) {
      us_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, us_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  us_data_ = us_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.us_data)
}

// required .mtg_fms.LaserScanner lrf_data = 9;
inline bool SensorData::_internal_has_lrf_data() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || lrf_data_ != nullptr);
  return value;
}
inline bool SensorData::has_lrf_data() const {
  return _internal_has_lrf_data();
}
inline void SensorData::clear_lrf_data() {
  if (lrf_data_ != nullptr) lrf_data_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mtg_fms::LaserScanner& SensorData::_internal_lrf_data() const {
  const ::mtg_fms::LaserScanner* p = lrf_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::LaserScanner&>(
      ::mtg_fms::_LaserScanner_default_instance_);
}
inline const ::mtg_fms::LaserScanner& SensorData::lrf_data() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.lrf_data)
  return _internal_lrf_data();
}
inline void SensorData::unsafe_arena_set_allocated_lrf_data(
    ::mtg_fms::LaserScanner* lrf_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lrf_data_);
  }
  lrf_data_ = lrf_data;
  if (lrf_data) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.SensorData.lrf_data)
}
inline ::mtg_fms::LaserScanner* SensorData::release_lrf_data() {
  _has_bits_[0] &= ~0x00000040u;
  ::mtg_fms::LaserScanner* temp = lrf_data_;
  lrf_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::LaserScanner* SensorData::unsafe_arena_release_lrf_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.lrf_data)
  _has_bits_[0] &= ~0x00000040u;
  ::mtg_fms::LaserScanner* temp = lrf_data_;
  lrf_data_ = nullptr;
  return temp;
}
inline ::mtg_fms::LaserScanner* SensorData::_internal_mutable_lrf_data() {
  _has_bits_[0] |= 0x00000040u;
  if (lrf_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::LaserScanner>(GetArenaForAllocation());
    lrf_data_ = p;
  }
  return lrf_data_;
}
inline ::mtg_fms::LaserScanner* SensorData::mutable_lrf_data() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.lrf_data)
  return _internal_mutable_lrf_data();
}
inline void SensorData::set_allocated_lrf_data(::mtg_fms::LaserScanner* lrf_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lrf_data_;
  }
  if (lrf_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::LaserScanner>::GetOwningArena(lrf_data);
    if (message_arena != submessage_arena) {
      lrf_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lrf_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  lrf_data_ = lrf_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.lrf_data)
}

// required .mtg_fms.AgentStatus agent_status_data = 10;
inline bool SensorData::_internal_has_agent_status_data() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || agent_status_data_ != nullptr);
  return value;
}
inline bool SensorData::has_agent_status_data() const {
  return _internal_has_agent_status_data();
}
inline void SensorData::clear_agent_status_data() {
  if (agent_status_data_ != nullptr) agent_status_data_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mtg_fms::AgentStatus& SensorData::_internal_agent_status_data() const {
  const ::mtg_fms::AgentStatus* p = agent_status_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::AgentStatus&>(
      ::mtg_fms::_AgentStatus_default_instance_);
}
inline const ::mtg_fms::AgentStatus& SensorData::agent_status_data() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.agent_status_data)
  return _internal_agent_status_data();
}
inline void SensorData::unsafe_arena_set_allocated_agent_status_data(
    ::mtg_fms::AgentStatus* agent_status_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_status_data_);
  }
  agent_status_data_ = agent_status_data;
  if (agent_status_data) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.SensorData.agent_status_data)
}
inline ::mtg_fms::AgentStatus* SensorData::release_agent_status_data() {
  _has_bits_[0] &= ~0x00000080u;
  ::mtg_fms::AgentStatus* temp = agent_status_data_;
  agent_status_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::AgentStatus* SensorData::unsafe_arena_release_agent_status_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.agent_status_data)
  _has_bits_[0] &= ~0x00000080u;
  ::mtg_fms::AgentStatus* temp = agent_status_data_;
  agent_status_data_ = nullptr;
  return temp;
}
inline ::mtg_fms::AgentStatus* SensorData::_internal_mutable_agent_status_data() {
  _has_bits_[0] |= 0x00000080u;
  if (agent_status_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::AgentStatus>(GetArenaForAllocation());
    agent_status_data_ = p;
  }
  return agent_status_data_;
}
inline ::mtg_fms::AgentStatus* SensorData::mutable_agent_status_data() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.agent_status_data)
  return _internal_mutable_agent_status_data();
}
inline void SensorData::set_allocated_agent_status_data(::mtg_fms::AgentStatus* agent_status_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete agent_status_data_;
  }
  if (agent_status_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::AgentStatus>::GetOwningArena(agent_status_data);
    if (message_arena != submessage_arena) {
      agent_status_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_status_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  agent_status_data_ = agent_status_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.agent_status_data)
}

// required .mtg_fms.AllDetections april_detections = 11;
inline bool SensorData::_internal_has_april_detections() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || april_detections_ != nullptr);
  return value;
}
inline bool SensorData::has_april_detections() const {
  return _internal_has_april_detections();
}
inline void SensorData::clear_april_detections() {
  if (april_detections_ != nullptr) april_detections_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::mtg_fms::AllDetections& SensorData::_internal_april_detections() const {
  const ::mtg_fms::AllDetections* p = april_detections_;
  return p != nullptr ? *p : reinterpret_cast<const ::mtg_fms::AllDetections&>(
      ::mtg_fms::_AllDetections_default_instance_);
}
inline const ::mtg_fms::AllDetections& SensorData::april_detections() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.april_detections)
  return _internal_april_detections();
}
inline void SensorData::unsafe_arena_set_allocated_april_detections(
    ::mtg_fms::AllDetections* april_detections) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(april_detections_);
  }
  april_detections_ = april_detections;
  if (april_detections) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mtg_fms.SensorData.april_detections)
}
inline ::mtg_fms::AllDetections* SensorData::release_april_detections() {
  _has_bits_[0] &= ~0x00000100u;
  ::mtg_fms::AllDetections* temp = april_detections_;
  april_detections_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mtg_fms::AllDetections* SensorData::unsafe_arena_release_april_detections() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.april_detections)
  _has_bits_[0] &= ~0x00000100u;
  ::mtg_fms::AllDetections* temp = april_detections_;
  april_detections_ = nullptr;
  return temp;
}
inline ::mtg_fms::AllDetections* SensorData::_internal_mutable_april_detections() {
  _has_bits_[0] |= 0x00000100u;
  if (april_detections_ == nullptr) {
    auto* p = CreateMaybeMessage<::mtg_fms::AllDetections>(GetArenaForAllocation());
    april_detections_ = p;
  }
  return april_detections_;
}
inline ::mtg_fms::AllDetections* SensorData::mutable_april_detections() {
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.april_detections)
  return _internal_mutable_april_detections();
}
inline void SensorData::set_allocated_april_detections(::mtg_fms::AllDetections* april_detections) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete april_detections_;
  }
  if (april_detections) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mtg_fms::AllDetections>::GetOwningArena(april_detections);
    if (message_arena != submessage_arena) {
      april_detections = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, april_detections, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  april_detections_ = april_detections;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.april_detections)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mtg_fms

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mtg_2eproto
