// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtg.proto

#ifndef PROTOBUF_INCLUDED_mtg_2eproto
#define PROTOBUF_INCLUDED_mtg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mtg_2eproto 

namespace protobuf_mtg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mtg_2eproto
namespace mtg_fms {
class Accelerometer;
class AccelerometerDefaultTypeInternal;
extern AccelerometerDefaultTypeInternal _Accelerometer_default_instance_;
class AgentStatus;
class AgentStatusDefaultTypeInternal;
extern AgentStatusDefaultTypeInternal _AgentStatus_default_instance_;
class AllDetections;
class AllDetectionsDefaultTypeInternal;
extern AllDetectionsDefaultTypeInternal _AllDetections_default_instance_;
class AprilTagDetection;
class AprilTagDetectionDefaultTypeInternal;
extern AprilTagDetectionDefaultTypeInternal _AprilTagDetection_default_instance_;
class AprilTagPose;
class AprilTagPoseDefaultTypeInternal;
extern AprilTagPoseDefaultTypeInternal _AprilTagPose_default_instance_;
class AprilTagRot;
class AprilTagRotDefaultTypeInternal;
extern AprilTagRotDefaultTypeInternal _AprilTagRot_default_instance_;
class AprilTagTrans;
class AprilTagTransDefaultTypeInternal;
extern AprilTagTransDefaultTypeInternal _AprilTagTrans_default_instance_;
class Encoder_count;
class Encoder_countDefaultTypeInternal;
extern Encoder_countDefaultTypeInternal _Encoder_count_default_instance_;
class Encoder_speed;
class Encoder_speedDefaultTypeInternal;
extern Encoder_speedDefaultTypeInternal _Encoder_speed_default_instance_;
class Gyroscope;
class GyroscopeDefaultTypeInternal;
extern GyroscopeDefaultTypeInternal _Gyroscope_default_instance_;
class Infrared;
class InfraredDefaultTypeInternal;
extern InfraredDefaultTypeInternal _Infrared_default_instance_;
class LaserScanner;
class LaserScannerDefaultTypeInternal;
extern LaserScannerDefaultTypeInternal _LaserScanner_default_instance_;
class SensorData;
class SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
class Ultrasonic;
class UltrasonicDefaultTypeInternal;
extern UltrasonicDefaultTypeInternal _Ultrasonic_default_instance_;
}  // namespace mtg_fms
namespace google {
namespace protobuf {
template<> ::mtg_fms::Accelerometer* Arena::CreateMaybeMessage<::mtg_fms::Accelerometer>(Arena*);
template<> ::mtg_fms::AgentStatus* Arena::CreateMaybeMessage<::mtg_fms::AgentStatus>(Arena*);
template<> ::mtg_fms::AllDetections* Arena::CreateMaybeMessage<::mtg_fms::AllDetections>(Arena*);
template<> ::mtg_fms::AprilTagDetection* Arena::CreateMaybeMessage<::mtg_fms::AprilTagDetection>(Arena*);
template<> ::mtg_fms::AprilTagPose* Arena::CreateMaybeMessage<::mtg_fms::AprilTagPose>(Arena*);
template<> ::mtg_fms::AprilTagRot* Arena::CreateMaybeMessage<::mtg_fms::AprilTagRot>(Arena*);
template<> ::mtg_fms::AprilTagTrans* Arena::CreateMaybeMessage<::mtg_fms::AprilTagTrans>(Arena*);
template<> ::mtg_fms::Encoder_count* Arena::CreateMaybeMessage<::mtg_fms::Encoder_count>(Arena*);
template<> ::mtg_fms::Encoder_speed* Arena::CreateMaybeMessage<::mtg_fms::Encoder_speed>(Arena*);
template<> ::mtg_fms::Gyroscope* Arena::CreateMaybeMessage<::mtg_fms::Gyroscope>(Arena*);
template<> ::mtg_fms::Infrared* Arena::CreateMaybeMessage<::mtg_fms::Infrared>(Arena*);
template<> ::mtg_fms::LaserScanner* Arena::CreateMaybeMessage<::mtg_fms::LaserScanner>(Arena*);
template<> ::mtg_fms::SensorData* Arena::CreateMaybeMessage<::mtg_fms::SensorData>(Arena*);
template<> ::mtg_fms::Ultrasonic* Arena::CreateMaybeMessage<::mtg_fms::Ultrasonic>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mtg_fms {

// ===================================================================

class Accelerometer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Accelerometer) */ {
 public:
  Accelerometer();
  virtual ~Accelerometer();

  Accelerometer(const Accelerometer& from);

  inline Accelerometer& operator=(const Accelerometer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Accelerometer(Accelerometer&& from) noexcept
    : Accelerometer() {
    *this = ::std::move(from);
  }

  inline Accelerometer& operator=(Accelerometer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Accelerometer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Accelerometer* internal_default_instance() {
    return reinterpret_cast<const Accelerometer*>(
               &_Accelerometer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Accelerometer* other);
  void Swap(Accelerometer* other);
  friend void swap(Accelerometer& a, Accelerometer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Accelerometer* New() const final {
    return CreateMaybeMessage<Accelerometer>(NULL);
  }

  Accelerometer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Accelerometer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Accelerometer& from);
  void MergeFrom(const Accelerometer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accelerometer* other);
  protected:
  explicit Accelerometer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double acc_x = 1;
  bool has_acc_x() const;
  void clear_acc_x();
  static const int kAccXFieldNumber = 1;
  double acc_x() const;
  void set_acc_x(double value);

  // required double acc_y = 2;
  bool has_acc_y() const;
  void clear_acc_y();
  static const int kAccYFieldNumber = 2;
  double acc_y() const;
  void set_acc_y(double value);

  // required double acc_z = 3;
  bool has_acc_z() const;
  void clear_acc_z();
  static const int kAccZFieldNumber = 3;
  double acc_z() const;
  void set_acc_z(double value);

  // @@protoc_insertion_point(class_scope:mtg_fms.Accelerometer)
 private:
  void set_has_acc_x();
  void clear_has_acc_x();
  void set_has_acc_y();
  void clear_has_acc_y();
  void set_has_acc_z();
  void clear_has_acc_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double acc_x_;
  double acc_y_;
  double acc_z_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ultrasonic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Ultrasonic) */ {
 public:
  Ultrasonic();
  virtual ~Ultrasonic();

  Ultrasonic(const Ultrasonic& from);

  inline Ultrasonic& operator=(const Ultrasonic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ultrasonic(Ultrasonic&& from) noexcept
    : Ultrasonic() {
    *this = ::std::move(from);
  }

  inline Ultrasonic& operator=(Ultrasonic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ultrasonic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ultrasonic* internal_default_instance() {
    return reinterpret_cast<const Ultrasonic*>(
               &_Ultrasonic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Ultrasonic* other);
  void Swap(Ultrasonic* other);
  friend void swap(Ultrasonic& a, Ultrasonic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ultrasonic* New() const final {
    return CreateMaybeMessage<Ultrasonic>(NULL);
  }

  Ultrasonic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ultrasonic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ultrasonic& from);
  void MergeFrom(const Ultrasonic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ultrasonic* other);
  protected:
  explicit Ultrasonic(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sensor_a = 1;
  bool has_sensor_a() const;
  void clear_sensor_a();
  static const int kSensorAFieldNumber = 1;
  ::google::protobuf::uint32 sensor_a() const;
  void set_sensor_a(::google::protobuf::uint32 value);

  // required uint32 sensor_b = 2;
  bool has_sensor_b() const;
  void clear_sensor_b();
  static const int kSensorBFieldNumber = 2;
  ::google::protobuf::uint32 sensor_b() const;
  void set_sensor_b(::google::protobuf::uint32 value);

  // required uint32 sensor_c = 3;
  bool has_sensor_c() const;
  void clear_sensor_c();
  static const int kSensorCFieldNumber = 3;
  ::google::protobuf::uint32 sensor_c() const;
  void set_sensor_c(::google::protobuf::uint32 value);

  // required uint32 sensor_d = 4;
  bool has_sensor_d() const;
  void clear_sensor_d();
  static const int kSensorDFieldNumber = 4;
  ::google::protobuf::uint32 sensor_d() const;
  void set_sensor_d(::google::protobuf::uint32 value);

  // required uint32 sensor_e = 5;
  bool has_sensor_e() const;
  void clear_sensor_e();
  static const int kSensorEFieldNumber = 5;
  ::google::protobuf::uint32 sensor_e() const;
  void set_sensor_e(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtg_fms.Ultrasonic)
 private:
  void set_has_sensor_a();
  void clear_has_sensor_a();
  void set_has_sensor_b();
  void clear_has_sensor_b();
  void set_has_sensor_c();
  void clear_has_sensor_c();
  void set_has_sensor_d();
  void clear_has_sensor_d();
  void set_has_sensor_e();
  void clear_has_sensor_e();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 sensor_a_;
  ::google::protobuf::uint32 sensor_b_;
  ::google::protobuf::uint32 sensor_c_;
  ::google::protobuf::uint32 sensor_d_;
  ::google::protobuf::uint32 sensor_e_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Infrared : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Infrared) */ {
 public:
  Infrared();
  virtual ~Infrared();

  Infrared(const Infrared& from);

  inline Infrared& operator=(const Infrared& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Infrared(Infrared&& from) noexcept
    : Infrared() {
    *this = ::std::move(from);
  }

  inline Infrared& operator=(Infrared&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Infrared& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Infrared* internal_default_instance() {
    return reinterpret_cast<const Infrared*>(
               &_Infrared_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Infrared* other);
  void Swap(Infrared* other);
  friend void swap(Infrared& a, Infrared& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Infrared* New() const final {
    return CreateMaybeMessage<Infrared>(NULL);
  }

  Infrared* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Infrared>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Infrared& from);
  void MergeFrom(const Infrared& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Infrared* other);
  protected:
  explicit Infrared(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sensor_a = 1;
  bool has_sensor_a() const;
  void clear_sensor_a();
  static const int kSensorAFieldNumber = 1;
  ::google::protobuf::uint32 sensor_a() const;
  void set_sensor_a(::google::protobuf::uint32 value);

  // required uint32 sensor_b = 2;
  bool has_sensor_b() const;
  void clear_sensor_b();
  static const int kSensorBFieldNumber = 2;
  ::google::protobuf::uint32 sensor_b() const;
  void set_sensor_b(::google::protobuf::uint32 value);

  // required uint32 sensor_c = 3;
  bool has_sensor_c() const;
  void clear_sensor_c();
  static const int kSensorCFieldNumber = 3;
  ::google::protobuf::uint32 sensor_c() const;
  void set_sensor_c(::google::protobuf::uint32 value);

  // required uint32 sensor_d = 4;
  bool has_sensor_d() const;
  void clear_sensor_d();
  static const int kSensorDFieldNumber = 4;
  ::google::protobuf::uint32 sensor_d() const;
  void set_sensor_d(::google::protobuf::uint32 value);

  // required uint32 sensor_e = 5;
  bool has_sensor_e() const;
  void clear_sensor_e();
  static const int kSensorEFieldNumber = 5;
  ::google::protobuf::uint32 sensor_e() const;
  void set_sensor_e(::google::protobuf::uint32 value);

  // required uint32 sensor_f = 6;
  bool has_sensor_f() const;
  void clear_sensor_f();
  static const int kSensorFFieldNumber = 6;
  ::google::protobuf::uint32 sensor_f() const;
  void set_sensor_f(::google::protobuf::uint32 value);

  // required uint32 sensor_g = 7;
  bool has_sensor_g() const;
  void clear_sensor_g();
  static const int kSensorGFieldNumber = 7;
  ::google::protobuf::uint32 sensor_g() const;
  void set_sensor_g(::google::protobuf::uint32 value);

  // required uint32 sensor_h = 8;
  bool has_sensor_h() const;
  void clear_sensor_h();
  static const int kSensorHFieldNumber = 8;
  ::google::protobuf::uint32 sensor_h() const;
  void set_sensor_h(::google::protobuf::uint32 value);

  // required uint32 sensor_i = 9;
  bool has_sensor_i() const;
  void clear_sensor_i();
  static const int kSensorIFieldNumber = 9;
  ::google::protobuf::uint32 sensor_i() const;
  void set_sensor_i(::google::protobuf::uint32 value);

  // required uint32 sensor_j = 10;
  bool has_sensor_j() const;
  void clear_sensor_j();
  static const int kSensorJFieldNumber = 10;
  ::google::protobuf::uint32 sensor_j() const;
  void set_sensor_j(::google::protobuf::uint32 value);

  // required uint32 sensor_k = 11;
  bool has_sensor_k() const;
  void clear_sensor_k();
  static const int kSensorKFieldNumber = 11;
  ::google::protobuf::uint32 sensor_k() const;
  void set_sensor_k(::google::protobuf::uint32 value);

  // required uint32 sensor_l = 12;
  bool has_sensor_l() const;
  void clear_sensor_l();
  static const int kSensorLFieldNumber = 12;
  ::google::protobuf::uint32 sensor_l() const;
  void set_sensor_l(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtg_fms.Infrared)
 private:
  void set_has_sensor_a();
  void clear_has_sensor_a();
  void set_has_sensor_b();
  void clear_has_sensor_b();
  void set_has_sensor_c();
  void clear_has_sensor_c();
  void set_has_sensor_d();
  void clear_has_sensor_d();
  void set_has_sensor_e();
  void clear_has_sensor_e();
  void set_has_sensor_f();
  void clear_has_sensor_f();
  void set_has_sensor_g();
  void clear_has_sensor_g();
  void set_has_sensor_h();
  void clear_has_sensor_h();
  void set_has_sensor_i();
  void clear_has_sensor_i();
  void set_has_sensor_j();
  void clear_has_sensor_j();
  void set_has_sensor_k();
  void clear_has_sensor_k();
  void set_has_sensor_l();
  void clear_has_sensor_l();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 sensor_a_;
  ::google::protobuf::uint32 sensor_b_;
  ::google::protobuf::uint32 sensor_c_;
  ::google::protobuf::uint32 sensor_d_;
  ::google::protobuf::uint32 sensor_e_;
  ::google::protobuf::uint32 sensor_f_;
  ::google::protobuf::uint32 sensor_g_;
  ::google::protobuf::uint32 sensor_h_;
  ::google::protobuf::uint32 sensor_i_;
  ::google::protobuf::uint32 sensor_j_;
  ::google::protobuf::uint32 sensor_k_;
  ::google::protobuf::uint32 sensor_l_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gyroscope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Gyroscope) */ {
 public:
  Gyroscope();
  virtual ~Gyroscope();

  Gyroscope(const Gyroscope& from);

  inline Gyroscope& operator=(const Gyroscope& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gyroscope(Gyroscope&& from) noexcept
    : Gyroscope() {
    *this = ::std::move(from);
  }

  inline Gyroscope& operator=(Gyroscope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gyroscope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gyroscope* internal_default_instance() {
    return reinterpret_cast<const Gyroscope*>(
               &_Gyroscope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Gyroscope* other);
  void Swap(Gyroscope* other);
  friend void swap(Gyroscope& a, Gyroscope& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gyroscope* New() const final {
    return CreateMaybeMessage<Gyroscope>(NULL);
  }

  Gyroscope* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gyroscope>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gyroscope& from);
  void MergeFrom(const Gyroscope& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gyroscope* other);
  protected:
  explicit Gyroscope(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double gyro_x = 1;
  bool has_gyro_x() const;
  void clear_gyro_x();
  static const int kGyroXFieldNumber = 1;
  double gyro_x() const;
  void set_gyro_x(double value);

  // required double gyro_y = 2;
  bool has_gyro_y() const;
  void clear_gyro_y();
  static const int kGyroYFieldNumber = 2;
  double gyro_y() const;
  void set_gyro_y(double value);

  // required double gyro_z = 3;
  bool has_gyro_z() const;
  void clear_gyro_z();
  static const int kGyroZFieldNumber = 3;
  double gyro_z() const;
  void set_gyro_z(double value);

  // @@protoc_insertion_point(class_scope:mtg_fms.Gyroscope)
 private:
  void set_has_gyro_x();
  void clear_has_gyro_x();
  void set_has_gyro_y();
  void clear_has_gyro_y();
  void set_has_gyro_z();
  void clear_has_gyro_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double gyro_x_;
  double gyro_y_;
  double gyro_z_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Encoder_count : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Encoder_count) */ {
 public:
  Encoder_count();
  virtual ~Encoder_count();

  Encoder_count(const Encoder_count& from);

  inline Encoder_count& operator=(const Encoder_count& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Encoder_count(Encoder_count&& from) noexcept
    : Encoder_count() {
    *this = ::std::move(from);
  }

  inline Encoder_count& operator=(Encoder_count&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Encoder_count& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Encoder_count* internal_default_instance() {
    return reinterpret_cast<const Encoder_count*>(
               &_Encoder_count_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Encoder_count* other);
  void Swap(Encoder_count* other);
  friend void swap(Encoder_count& a, Encoder_count& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Encoder_count* New() const final {
    return CreateMaybeMessage<Encoder_count>(NULL);
  }

  Encoder_count* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Encoder_count>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Encoder_count& from);
  void MergeFrom(const Encoder_count& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder_count* other);
  protected:
  explicit Encoder_count(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 left = 1;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  ::google::protobuf::uint64 left() const;
  void set_left(::google::protobuf::uint64 value);

  // required uint64 right = 2;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 2;
  ::google::protobuf::uint64 right() const;
  void set_right(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mtg_fms.Encoder_count)
 private:
  void set_has_left();
  void clear_has_left();
  void set_has_right();
  void clear_has_right();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 left_;
  ::google::protobuf::uint64 right_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Encoder_speed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.Encoder_speed) */ {
 public:
  Encoder_speed();
  virtual ~Encoder_speed();

  Encoder_speed(const Encoder_speed& from);

  inline Encoder_speed& operator=(const Encoder_speed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Encoder_speed(Encoder_speed&& from) noexcept
    : Encoder_speed() {
    *this = ::std::move(from);
  }

  inline Encoder_speed& operator=(Encoder_speed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Encoder_speed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Encoder_speed* internal_default_instance() {
    return reinterpret_cast<const Encoder_speed*>(
               &_Encoder_speed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(Encoder_speed* other);
  void Swap(Encoder_speed* other);
  friend void swap(Encoder_speed& a, Encoder_speed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Encoder_speed* New() const final {
    return CreateMaybeMessage<Encoder_speed>(NULL);
  }

  Encoder_speed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Encoder_speed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Encoder_speed& from);
  void MergeFrom(const Encoder_speed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder_speed* other);
  protected:
  explicit Encoder_speed(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 left = 1;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  ::google::protobuf::uint64 left() const;
  void set_left(::google::protobuf::uint64 value);

  // required uint64 right = 2;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 2;
  ::google::protobuf::uint64 right() const;
  void set_right(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mtg_fms.Encoder_speed)
 private:
  void set_has_left();
  void clear_has_left();
  void set_has_right();
  void clear_has_right();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 left_;
  ::google::protobuf::uint64 right_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaserScanner : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.LaserScanner) */ {
 public:
  LaserScanner();
  virtual ~LaserScanner();

  LaserScanner(const LaserScanner& from);

  inline LaserScanner& operator=(const LaserScanner& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaserScanner(LaserScanner&& from) noexcept
    : LaserScanner() {
    *this = ::std::move(from);
  }

  inline LaserScanner& operator=(LaserScanner&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaserScanner& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserScanner* internal_default_instance() {
    return reinterpret_cast<const LaserScanner*>(
               &_LaserScanner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(LaserScanner* other);
  void Swap(LaserScanner* other);
  friend void swap(LaserScanner& a, LaserScanner& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaserScanner* New() const final {
    return CreateMaybeMessage<LaserScanner>(NULL);
  }

  LaserScanner* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaserScanner>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaserScanner& from);
  void MergeFrom(const LaserScanner& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserScanner* other);
  protected:
  explicit LaserScanner(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 values = 1 [packed = true];
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  ::google::protobuf::uint64 values(int index) const;
  void set_values(int index, ::google::protobuf::uint64 value);
  void add_values(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      values() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:mtg_fms.LaserScanner)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > values_;
  mutable int _values_cached_byte_size_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AgentStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AgentStatus) */ {
 public:
  AgentStatus();
  virtual ~AgentStatus();

  AgentStatus(const AgentStatus& from);

  inline AgentStatus& operator=(const AgentStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgentStatus(AgentStatus&& from) noexcept
    : AgentStatus() {
    *this = ::std::move(from);
  }

  inline AgentStatus& operator=(AgentStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentStatus* internal_default_instance() {
    return reinterpret_cast<const AgentStatus*>(
               &_AgentStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(AgentStatus* other);
  void Swap(AgentStatus* other);
  friend void swap(AgentStatus& a, AgentStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgentStatus* New() const final {
    return CreateMaybeMessage<AgentStatus>(NULL);
  }

  AgentStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AgentStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AgentStatus& from);
  void MergeFrom(const AgentStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentStatus* other);
  protected:
  explicit AgentStatus(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 battery_level = 1;
  bool has_battery_level() const;
  void clear_battery_level();
  static const int kBatteryLevelFieldNumber = 1;
  ::google::protobuf::uint64 battery_level() const;
  void set_battery_level(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mtg_fms.AgentStatus)
 private:
  void set_has_battery_level();
  void clear_has_battery_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 battery_level_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AprilTagRot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AprilTagRot) */ {
 public:
  AprilTagRot();
  virtual ~AprilTagRot();

  AprilTagRot(const AprilTagRot& from);

  inline AprilTagRot& operator=(const AprilTagRot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AprilTagRot(AprilTagRot&& from) noexcept
    : AprilTagRot() {
    *this = ::std::move(from);
  }

  inline AprilTagRot& operator=(AprilTagRot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AprilTagRot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AprilTagRot* internal_default_instance() {
    return reinterpret_cast<const AprilTagRot*>(
               &_AprilTagRot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(AprilTagRot* other);
  void Swap(AprilTagRot* other);
  friend void swap(AprilTagRot& a, AprilTagRot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AprilTagRot* New() const final {
    return CreateMaybeMessage<AprilTagRot>(NULL);
  }

  AprilTagRot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AprilTagRot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AprilTagRot& from);
  void MergeFrom(const AprilTagRot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AprilTagRot* other);
  protected:
  explicit AprilTagRot(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double r11 = 1;
  bool has_r11() const;
  void clear_r11();
  static const int kR11FieldNumber = 1;
  double r11() const;
  void set_r11(double value);

  // required double r12 = 2;
  bool has_r12() const;
  void clear_r12();
  static const int kR12FieldNumber = 2;
  double r12() const;
  void set_r12(double value);

  // required double r13 = 3;
  bool has_r13() const;
  void clear_r13();
  static const int kR13FieldNumber = 3;
  double r13() const;
  void set_r13(double value);

  // required double r21 = 4;
  bool has_r21() const;
  void clear_r21();
  static const int kR21FieldNumber = 4;
  double r21() const;
  void set_r21(double value);

  // required double r22 = 5;
  bool has_r22() const;
  void clear_r22();
  static const int kR22FieldNumber = 5;
  double r22() const;
  void set_r22(double value);

  // required double r23 = 6;
  bool has_r23() const;
  void clear_r23();
  static const int kR23FieldNumber = 6;
  double r23() const;
  void set_r23(double value);

  // required double r31 = 7;
  bool has_r31() const;
  void clear_r31();
  static const int kR31FieldNumber = 7;
  double r31() const;
  void set_r31(double value);

  // required double r32 = 8;
  bool has_r32() const;
  void clear_r32();
  static const int kR32FieldNumber = 8;
  double r32() const;
  void set_r32(double value);

  // required double r33 = 9;
  bool has_r33() const;
  void clear_r33();
  static const int kR33FieldNumber = 9;
  double r33() const;
  void set_r33(double value);

  // @@protoc_insertion_point(class_scope:mtg_fms.AprilTagRot)
 private:
  void set_has_r11();
  void clear_has_r11();
  void set_has_r12();
  void clear_has_r12();
  void set_has_r13();
  void clear_has_r13();
  void set_has_r21();
  void clear_has_r21();
  void set_has_r22();
  void clear_has_r22();
  void set_has_r23();
  void clear_has_r23();
  void set_has_r31();
  void clear_has_r31();
  void set_has_r32();
  void clear_has_r32();
  void set_has_r33();
  void clear_has_r33();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double r11_;
  double r12_;
  double r13_;
  double r21_;
  double r22_;
  double r23_;
  double r31_;
  double r32_;
  double r33_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AprilTagTrans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AprilTagTrans) */ {
 public:
  AprilTagTrans();
  virtual ~AprilTagTrans();

  AprilTagTrans(const AprilTagTrans& from);

  inline AprilTagTrans& operator=(const AprilTagTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AprilTagTrans(AprilTagTrans&& from) noexcept
    : AprilTagTrans() {
    *this = ::std::move(from);
  }

  inline AprilTagTrans& operator=(AprilTagTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AprilTagTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AprilTagTrans* internal_default_instance() {
    return reinterpret_cast<const AprilTagTrans*>(
               &_AprilTagTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(AprilTagTrans* other);
  void Swap(AprilTagTrans* other);
  friend void swap(AprilTagTrans& a, AprilTagTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AprilTagTrans* New() const final {
    return CreateMaybeMessage<AprilTagTrans>(NULL);
  }

  AprilTagTrans* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AprilTagTrans>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AprilTagTrans& from);
  void MergeFrom(const AprilTagTrans& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AprilTagTrans* other);
  protected:
  explicit AprilTagTrans(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:mtg_fms.AprilTagTrans)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AprilTagPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AprilTagPose) */ {
 public:
  AprilTagPose();
  virtual ~AprilTagPose();

  AprilTagPose(const AprilTagPose& from);

  inline AprilTagPose& operator=(const AprilTagPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AprilTagPose(AprilTagPose&& from) noexcept
    : AprilTagPose() {
    *this = ::std::move(from);
  }

  inline AprilTagPose& operator=(AprilTagPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AprilTagPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AprilTagPose* internal_default_instance() {
    return reinterpret_cast<const AprilTagPose*>(
               &_AprilTagPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(AprilTagPose* other);
  void Swap(AprilTagPose* other);
  friend void swap(AprilTagPose& a, AprilTagPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AprilTagPose* New() const final {
    return CreateMaybeMessage<AprilTagPose>(NULL);
  }

  AprilTagPose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AprilTagPose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AprilTagPose& from);
  void MergeFrom(const AprilTagPose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AprilTagPose* other);
  protected:
  explicit AprilTagPose(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mtg_fms.AprilTagRot R = 1;
  bool has_r() const;
  void clear_r();
  static const int kRFieldNumber = 1;
  private:
  const ::mtg_fms::AprilTagRot& _internal_r() const;
  public:
  const ::mtg_fms::AprilTagRot& r() const;
  ::mtg_fms::AprilTagRot* release_r();
  ::mtg_fms::AprilTagRot* mutable_r();
  void set_allocated_r(::mtg_fms::AprilTagRot* r);
  void unsafe_arena_set_allocated_r(
      ::mtg_fms::AprilTagRot* r);
  ::mtg_fms::AprilTagRot* unsafe_arena_release_r();

  // required .mtg_fms.AprilTagTrans t = 2;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 2;
  private:
  const ::mtg_fms::AprilTagTrans& _internal_t() const;
  public:
  const ::mtg_fms::AprilTagTrans& t() const;
  ::mtg_fms::AprilTagTrans* release_t();
  ::mtg_fms::AprilTagTrans* mutable_t();
  void set_allocated_t(::mtg_fms::AprilTagTrans* t);
  void unsafe_arena_set_allocated_t(
      ::mtg_fms::AprilTagTrans* t);
  ::mtg_fms::AprilTagTrans* unsafe_arena_release_t();

  // @@protoc_insertion_point(class_scope:mtg_fms.AprilTagPose)
 private:
  void set_has_r();
  void clear_has_r();
  void set_has_t();
  void clear_has_t();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::mtg_fms::AprilTagRot* r_;
  ::mtg_fms::AprilTagTrans* t_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AprilTagDetection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AprilTagDetection) */ {
 public:
  AprilTagDetection();
  virtual ~AprilTagDetection();

  AprilTagDetection(const AprilTagDetection& from);

  inline AprilTagDetection& operator=(const AprilTagDetection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AprilTagDetection(AprilTagDetection&& from) noexcept
    : AprilTagDetection() {
    *this = ::std::move(from);
  }

  inline AprilTagDetection& operator=(AprilTagDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AprilTagDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AprilTagDetection* internal_default_instance() {
    return reinterpret_cast<const AprilTagDetection*>(
               &_AprilTagDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(AprilTagDetection* other);
  void Swap(AprilTagDetection* other);
  friend void swap(AprilTagDetection& a, AprilTagDetection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AprilTagDetection* New() const final {
    return CreateMaybeMessage<AprilTagDetection>(NULL);
  }

  AprilTagDetection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AprilTagDetection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AprilTagDetection& from);
  void MergeFrom(const AprilTagDetection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AprilTagDetection* other);
  protected:
  explicit AprilTagDetection(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mtg_fms.AprilTagPose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  private:
  const ::mtg_fms::AprilTagPose& _internal_pose() const;
  public:
  const ::mtg_fms::AprilTagPose& pose() const;
  ::mtg_fms::AprilTagPose* release_pose();
  ::mtg_fms::AprilTagPose* mutable_pose();
  void set_allocated_pose(::mtg_fms::AprilTagPose* pose);
  void unsafe_arena_set_allocated_pose(
      ::mtg_fms::AprilTagPose* pose);
  ::mtg_fms::AprilTagPose* unsafe_arena_release_pose();

  // required uint32 tag_id = 1;
  bool has_tag_id() const;
  void clear_tag_id();
  static const int kTagIdFieldNumber = 1;
  ::google::protobuf::uint32 tag_id() const;
  void set_tag_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtg_fms.AprilTagDetection)
 private:
  void set_has_tag_id();
  void clear_has_tag_id();
  void set_has_pose();
  void clear_has_pose();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::mtg_fms::AprilTagPose* pose_;
  ::google::protobuf::uint32 tag_id_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllDetections : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.AllDetections) */ {
 public:
  AllDetections();
  virtual ~AllDetections();

  AllDetections(const AllDetections& from);

  inline AllDetections& operator=(const AllDetections& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllDetections(AllDetections&& from) noexcept
    : AllDetections() {
    *this = ::std::move(from);
  }

  inline AllDetections& operator=(AllDetections&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllDetections& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllDetections* internal_default_instance() {
    return reinterpret_cast<const AllDetections*>(
               &_AllDetections_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(AllDetections* other);
  void Swap(AllDetections* other);
  friend void swap(AllDetections& a, AllDetections& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllDetections* New() const final {
    return CreateMaybeMessage<AllDetections>(NULL);
  }

  AllDetections* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllDetections>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllDetections& from);
  void MergeFrom(const AllDetections& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllDetections* other);
  protected:
  explicit AllDetections(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtg_fms.AprilTagDetection tag_detections = 1;
  int tag_detections_size() const;
  void clear_tag_detections();
  static const int kTagDetectionsFieldNumber = 1;
  ::mtg_fms::AprilTagDetection* mutable_tag_detections(int index);
  ::google::protobuf::RepeatedPtrField< ::mtg_fms::AprilTagDetection >*
      mutable_tag_detections();
  const ::mtg_fms::AprilTagDetection& tag_detections(int index) const;
  ::mtg_fms::AprilTagDetection* add_tag_detections();
  const ::google::protobuf::RepeatedPtrField< ::mtg_fms::AprilTagDetection >&
      tag_detections() const;

  // @@protoc_insertion_point(class_scope:mtg_fms.AllDetections)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mtg_fms::AprilTagDetection > tag_detections_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtg_fms.SensorData) */ {
 public:
  SensorData();
  virtual ~SensorData();

  SensorData(const SensorData& from);

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorData(SensorData&& from) noexcept
    : SensorData() {
    *this = ::std::move(from);
  }

  inline SensorData& operator=(SensorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorData* internal_default_instance() {
    return reinterpret_cast<const SensorData*>(
               &_SensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(SensorData* other);
  void Swap(SensorData* other);
  friend void swap(SensorData& a, SensorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorData* New() const final {
    return CreateMaybeMessage<SensorData>(NULL);
  }

  SensorData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorData& from);
  void MergeFrom(const SensorData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData* other);
  protected:
  explicit SensorData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mtg_fms.Accelerometer accel_data = 3;
  bool has_accel_data() const;
  void clear_accel_data();
  static const int kAccelDataFieldNumber = 3;
  private:
  const ::mtg_fms::Accelerometer& _internal_accel_data() const;
  public:
  const ::mtg_fms::Accelerometer& accel_data() const;
  ::mtg_fms::Accelerometer* release_accel_data();
  ::mtg_fms::Accelerometer* mutable_accel_data();
  void set_allocated_accel_data(::mtg_fms::Accelerometer* accel_data);
  void unsafe_arena_set_allocated_accel_data(
      ::mtg_fms::Accelerometer* accel_data);
  ::mtg_fms::Accelerometer* unsafe_arena_release_accel_data();

  // required .mtg_fms.Gyroscope gyro_data = 4;
  bool has_gyro_data() const;
  void clear_gyro_data();
  static const int kGyroDataFieldNumber = 4;
  private:
  const ::mtg_fms::Gyroscope& _internal_gyro_data() const;
  public:
  const ::mtg_fms::Gyroscope& gyro_data() const;
  ::mtg_fms::Gyroscope* release_gyro_data();
  ::mtg_fms::Gyroscope* mutable_gyro_data();
  void set_allocated_gyro_data(::mtg_fms::Gyroscope* gyro_data);
  void unsafe_arena_set_allocated_gyro_data(
      ::mtg_fms::Gyroscope* gyro_data);
  ::mtg_fms::Gyroscope* unsafe_arena_release_gyro_data();

  // required .mtg_fms.Encoder_count count_data = 5;
  bool has_count_data() const;
  void clear_count_data();
  static const int kCountDataFieldNumber = 5;
  private:
  const ::mtg_fms::Encoder_count& _internal_count_data() const;
  public:
  const ::mtg_fms::Encoder_count& count_data() const;
  ::mtg_fms::Encoder_count* release_count_data();
  ::mtg_fms::Encoder_count* mutable_count_data();
  void set_allocated_count_data(::mtg_fms::Encoder_count* count_data);
  void unsafe_arena_set_allocated_count_data(
      ::mtg_fms::Encoder_count* count_data);
  ::mtg_fms::Encoder_count* unsafe_arena_release_count_data();

  // required .mtg_fms.Encoder_speed speed_data = 6;
  bool has_speed_data() const;
  void clear_speed_data();
  static const int kSpeedDataFieldNumber = 6;
  private:
  const ::mtg_fms::Encoder_speed& _internal_speed_data() const;
  public:
  const ::mtg_fms::Encoder_speed& speed_data() const;
  ::mtg_fms::Encoder_speed* release_speed_data();
  ::mtg_fms::Encoder_speed* mutable_speed_data();
  void set_allocated_speed_data(::mtg_fms::Encoder_speed* speed_data);
  void unsafe_arena_set_allocated_speed_data(
      ::mtg_fms::Encoder_speed* speed_data);
  ::mtg_fms::Encoder_speed* unsafe_arena_release_speed_data();

  // required .mtg_fms.Infrared ir_data = 7;
  bool has_ir_data() const;
  void clear_ir_data();
  static const int kIrDataFieldNumber = 7;
  private:
  const ::mtg_fms::Infrared& _internal_ir_data() const;
  public:
  const ::mtg_fms::Infrared& ir_data() const;
  ::mtg_fms::Infrared* release_ir_data();
  ::mtg_fms::Infrared* mutable_ir_data();
  void set_allocated_ir_data(::mtg_fms::Infrared* ir_data);
  void unsafe_arena_set_allocated_ir_data(
      ::mtg_fms::Infrared* ir_data);
  ::mtg_fms::Infrared* unsafe_arena_release_ir_data();

  // required .mtg_fms.Ultrasonic us_data = 8;
  bool has_us_data() const;
  void clear_us_data();
  static const int kUsDataFieldNumber = 8;
  private:
  const ::mtg_fms::Ultrasonic& _internal_us_data() const;
  public:
  const ::mtg_fms::Ultrasonic& us_data() const;
  ::mtg_fms::Ultrasonic* release_us_data();
  ::mtg_fms::Ultrasonic* mutable_us_data();
  void set_allocated_us_data(::mtg_fms::Ultrasonic* us_data);
  void unsafe_arena_set_allocated_us_data(
      ::mtg_fms::Ultrasonic* us_data);
  ::mtg_fms::Ultrasonic* unsafe_arena_release_us_data();

  // required .mtg_fms.LaserScanner lrf_data = 9;
  bool has_lrf_data() const;
  void clear_lrf_data();
  static const int kLrfDataFieldNumber = 9;
  private:
  const ::mtg_fms::LaserScanner& _internal_lrf_data() const;
  public:
  const ::mtg_fms::LaserScanner& lrf_data() const;
  ::mtg_fms::LaserScanner* release_lrf_data();
  ::mtg_fms::LaserScanner* mutable_lrf_data();
  void set_allocated_lrf_data(::mtg_fms::LaserScanner* lrf_data);
  void unsafe_arena_set_allocated_lrf_data(
      ::mtg_fms::LaserScanner* lrf_data);
  ::mtg_fms::LaserScanner* unsafe_arena_release_lrf_data();

  // required .mtg_fms.AgentStatus agent_status_data = 10;
  bool has_agent_status_data() const;
  void clear_agent_status_data();
  static const int kAgentStatusDataFieldNumber = 10;
  private:
  const ::mtg_fms::AgentStatus& _internal_agent_status_data() const;
  public:
  const ::mtg_fms::AgentStatus& agent_status_data() const;
  ::mtg_fms::AgentStatus* release_agent_status_data();
  ::mtg_fms::AgentStatus* mutable_agent_status_data();
  void set_allocated_agent_status_data(::mtg_fms::AgentStatus* agent_status_data);
  void unsafe_arena_set_allocated_agent_status_data(
      ::mtg_fms::AgentStatus* agent_status_data);
  ::mtg_fms::AgentStatus* unsafe_arena_release_agent_status_data();

  // required .mtg_fms.AllDetections april_detections = 11;
  bool has_april_detections() const;
  void clear_april_detections();
  static const int kAprilDetectionsFieldNumber = 11;
  private:
  const ::mtg_fms::AllDetections& _internal_april_detections() const;
  public:
  const ::mtg_fms::AllDetections& april_detections() const;
  ::mtg_fms::AllDetections* release_april_detections();
  ::mtg_fms::AllDetections* mutable_april_detections();
  void set_allocated_april_detections(::mtg_fms::AllDetections* april_detections);
  void unsafe_arena_set_allocated_april_detections(
      ::mtg_fms::AllDetections* april_detections);
  ::mtg_fms::AllDetections* unsafe_arena_release_april_detections();

  // required uint64 timestamp_ns = 1;
  bool has_timestamp_ns() const;
  void clear_timestamp_ns();
  static const int kTimestampNsFieldNumber = 1;
  ::google::protobuf::uint64 timestamp_ns() const;
  void set_timestamp_ns(::google::protobuf::uint64 value);

  // required uint32 seq_id = 2;
  bool has_seq_id() const;
  void clear_seq_id();
  static const int kSeqIdFieldNumber = 2;
  ::google::protobuf::uint32 seq_id() const;
  void set_seq_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtg_fms.SensorData)
 private:
  void set_has_timestamp_ns();
  void clear_has_timestamp_ns();
  void set_has_seq_id();
  void clear_has_seq_id();
  void set_has_accel_data();
  void clear_has_accel_data();
  void set_has_gyro_data();
  void clear_has_gyro_data();
  void set_has_count_data();
  void clear_has_count_data();
  void set_has_speed_data();
  void clear_has_speed_data();
  void set_has_ir_data();
  void clear_has_ir_data();
  void set_has_us_data();
  void clear_has_us_data();
  void set_has_lrf_data();
  void clear_has_lrf_data();
  void set_has_agent_status_data();
  void clear_has_agent_status_data();
  void set_has_april_detections();
  void clear_has_april_detections();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::mtg_fms::Accelerometer* accel_data_;
  ::mtg_fms::Gyroscope* gyro_data_;
  ::mtg_fms::Encoder_count* count_data_;
  ::mtg_fms::Encoder_speed* speed_data_;
  ::mtg_fms::Infrared* ir_data_;
  ::mtg_fms::Ultrasonic* us_data_;
  ::mtg_fms::LaserScanner* lrf_data_;
  ::mtg_fms::AgentStatus* agent_status_data_;
  ::mtg_fms::AllDetections* april_detections_;
  ::google::protobuf::uint64 timestamp_ns_;
  ::google::protobuf::uint32 seq_id_;
  friend struct ::protobuf_mtg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Accelerometer

// required double acc_x = 1;
inline bool Accelerometer::has_acc_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Accelerometer::set_has_acc_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Accelerometer::clear_has_acc_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Accelerometer::clear_acc_x() {
  acc_x_ = 0;
  clear_has_acc_x();
}
inline double Accelerometer::acc_x() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Accelerometer.acc_x)
  return acc_x_;
}
inline void Accelerometer::set_acc_x(double value) {
  set_has_acc_x();
  acc_x_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Accelerometer.acc_x)
}

// required double acc_y = 2;
inline bool Accelerometer::has_acc_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Accelerometer::set_has_acc_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Accelerometer::clear_has_acc_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Accelerometer::clear_acc_y() {
  acc_y_ = 0;
  clear_has_acc_y();
}
inline double Accelerometer::acc_y() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Accelerometer.acc_y)
  return acc_y_;
}
inline void Accelerometer::set_acc_y(double value) {
  set_has_acc_y();
  acc_y_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Accelerometer.acc_y)
}

// required double acc_z = 3;
inline bool Accelerometer::has_acc_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Accelerometer::set_has_acc_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Accelerometer::clear_has_acc_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Accelerometer::clear_acc_z() {
  acc_z_ = 0;
  clear_has_acc_z();
}
inline double Accelerometer::acc_z() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Accelerometer.acc_z)
  return acc_z_;
}
inline void Accelerometer::set_acc_z(double value) {
  set_has_acc_z();
  acc_z_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Accelerometer.acc_z)
}

// -------------------------------------------------------------------

// Ultrasonic

// required uint32 sensor_a = 1;
inline bool Ultrasonic::has_sensor_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ultrasonic::set_has_sensor_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ultrasonic::clear_has_sensor_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ultrasonic::clear_sensor_a() {
  sensor_a_ = 0u;
  clear_has_sensor_a();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_a() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_a)
  return sensor_a_;
}
inline void Ultrasonic::set_sensor_a(::google::protobuf::uint32 value) {
  set_has_sensor_a();
  sensor_a_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_a)
}

// required uint32 sensor_b = 2;
inline bool Ultrasonic::has_sensor_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ultrasonic::set_has_sensor_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ultrasonic::clear_has_sensor_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ultrasonic::clear_sensor_b() {
  sensor_b_ = 0u;
  clear_has_sensor_b();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_b() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_b)
  return sensor_b_;
}
inline void Ultrasonic::set_sensor_b(::google::protobuf::uint32 value) {
  set_has_sensor_b();
  sensor_b_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_b)
}

// required uint32 sensor_c = 3;
inline bool Ultrasonic::has_sensor_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ultrasonic::set_has_sensor_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ultrasonic::clear_has_sensor_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ultrasonic::clear_sensor_c() {
  sensor_c_ = 0u;
  clear_has_sensor_c();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_c() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_c)
  return sensor_c_;
}
inline void Ultrasonic::set_sensor_c(::google::protobuf::uint32 value) {
  set_has_sensor_c();
  sensor_c_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_c)
}

// required uint32 sensor_d = 4;
inline bool Ultrasonic::has_sensor_d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ultrasonic::set_has_sensor_d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ultrasonic::clear_has_sensor_d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ultrasonic::clear_sensor_d() {
  sensor_d_ = 0u;
  clear_has_sensor_d();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_d() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_d)
  return sensor_d_;
}
inline void Ultrasonic::set_sensor_d(::google::protobuf::uint32 value) {
  set_has_sensor_d();
  sensor_d_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_d)
}

// required uint32 sensor_e = 5;
inline bool Ultrasonic::has_sensor_e() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ultrasonic::set_has_sensor_e() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ultrasonic::clear_has_sensor_e() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ultrasonic::clear_sensor_e() {
  sensor_e_ = 0u;
  clear_has_sensor_e();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_e() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Ultrasonic.sensor_e)
  return sensor_e_;
}
inline void Ultrasonic::set_sensor_e(::google::protobuf::uint32 value) {
  set_has_sensor_e();
  sensor_e_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Ultrasonic.sensor_e)
}

// -------------------------------------------------------------------

// Infrared

// required uint32 sensor_a = 1;
inline bool Infrared::has_sensor_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Infrared::set_has_sensor_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Infrared::clear_has_sensor_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Infrared::clear_sensor_a() {
  sensor_a_ = 0u;
  clear_has_sensor_a();
}
inline ::google::protobuf::uint32 Infrared::sensor_a() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_a)
  return sensor_a_;
}
inline void Infrared::set_sensor_a(::google::protobuf::uint32 value) {
  set_has_sensor_a();
  sensor_a_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_a)
}

// required uint32 sensor_b = 2;
inline bool Infrared::has_sensor_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Infrared::set_has_sensor_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Infrared::clear_has_sensor_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Infrared::clear_sensor_b() {
  sensor_b_ = 0u;
  clear_has_sensor_b();
}
inline ::google::protobuf::uint32 Infrared::sensor_b() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_b)
  return sensor_b_;
}
inline void Infrared::set_sensor_b(::google::protobuf::uint32 value) {
  set_has_sensor_b();
  sensor_b_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_b)
}

// required uint32 sensor_c = 3;
inline bool Infrared::has_sensor_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Infrared::set_has_sensor_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Infrared::clear_has_sensor_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Infrared::clear_sensor_c() {
  sensor_c_ = 0u;
  clear_has_sensor_c();
}
inline ::google::protobuf::uint32 Infrared::sensor_c() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_c)
  return sensor_c_;
}
inline void Infrared::set_sensor_c(::google::protobuf::uint32 value) {
  set_has_sensor_c();
  sensor_c_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_c)
}

// required uint32 sensor_d = 4;
inline bool Infrared::has_sensor_d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Infrared::set_has_sensor_d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Infrared::clear_has_sensor_d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Infrared::clear_sensor_d() {
  sensor_d_ = 0u;
  clear_has_sensor_d();
}
inline ::google::protobuf::uint32 Infrared::sensor_d() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_d)
  return sensor_d_;
}
inline void Infrared::set_sensor_d(::google::protobuf::uint32 value) {
  set_has_sensor_d();
  sensor_d_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_d)
}

// required uint32 sensor_e = 5;
inline bool Infrared::has_sensor_e() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Infrared::set_has_sensor_e() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Infrared::clear_has_sensor_e() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Infrared::clear_sensor_e() {
  sensor_e_ = 0u;
  clear_has_sensor_e();
}
inline ::google::protobuf::uint32 Infrared::sensor_e() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_e)
  return sensor_e_;
}
inline void Infrared::set_sensor_e(::google::protobuf::uint32 value) {
  set_has_sensor_e();
  sensor_e_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_e)
}

// required uint32 sensor_f = 6;
inline bool Infrared::has_sensor_f() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Infrared::set_has_sensor_f() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Infrared::clear_has_sensor_f() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Infrared::clear_sensor_f() {
  sensor_f_ = 0u;
  clear_has_sensor_f();
}
inline ::google::protobuf::uint32 Infrared::sensor_f() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_f)
  return sensor_f_;
}
inline void Infrared::set_sensor_f(::google::protobuf::uint32 value) {
  set_has_sensor_f();
  sensor_f_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_f)
}

// required uint32 sensor_g = 7;
inline bool Infrared::has_sensor_g() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Infrared::set_has_sensor_g() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Infrared::clear_has_sensor_g() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Infrared::clear_sensor_g() {
  sensor_g_ = 0u;
  clear_has_sensor_g();
}
inline ::google::protobuf::uint32 Infrared::sensor_g() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_g)
  return sensor_g_;
}
inline void Infrared::set_sensor_g(::google::protobuf::uint32 value) {
  set_has_sensor_g();
  sensor_g_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_g)
}

// required uint32 sensor_h = 8;
inline bool Infrared::has_sensor_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Infrared::set_has_sensor_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Infrared::clear_has_sensor_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Infrared::clear_sensor_h() {
  sensor_h_ = 0u;
  clear_has_sensor_h();
}
inline ::google::protobuf::uint32 Infrared::sensor_h() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_h)
  return sensor_h_;
}
inline void Infrared::set_sensor_h(::google::protobuf::uint32 value) {
  set_has_sensor_h();
  sensor_h_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_h)
}

// required uint32 sensor_i = 9;
inline bool Infrared::has_sensor_i() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Infrared::set_has_sensor_i() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Infrared::clear_has_sensor_i() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Infrared::clear_sensor_i() {
  sensor_i_ = 0u;
  clear_has_sensor_i();
}
inline ::google::protobuf::uint32 Infrared::sensor_i() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_i)
  return sensor_i_;
}
inline void Infrared::set_sensor_i(::google::protobuf::uint32 value) {
  set_has_sensor_i();
  sensor_i_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_i)
}

// required uint32 sensor_j = 10;
inline bool Infrared::has_sensor_j() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Infrared::set_has_sensor_j() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Infrared::clear_has_sensor_j() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Infrared::clear_sensor_j() {
  sensor_j_ = 0u;
  clear_has_sensor_j();
}
inline ::google::protobuf::uint32 Infrared::sensor_j() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_j)
  return sensor_j_;
}
inline void Infrared::set_sensor_j(::google::protobuf::uint32 value) {
  set_has_sensor_j();
  sensor_j_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_j)
}

// required uint32 sensor_k = 11;
inline bool Infrared::has_sensor_k() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Infrared::set_has_sensor_k() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Infrared::clear_has_sensor_k() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Infrared::clear_sensor_k() {
  sensor_k_ = 0u;
  clear_has_sensor_k();
}
inline ::google::protobuf::uint32 Infrared::sensor_k() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_k)
  return sensor_k_;
}
inline void Infrared::set_sensor_k(::google::protobuf::uint32 value) {
  set_has_sensor_k();
  sensor_k_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_k)
}

// required uint32 sensor_l = 12;
inline bool Infrared::has_sensor_l() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Infrared::set_has_sensor_l() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Infrared::clear_has_sensor_l() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Infrared::clear_sensor_l() {
  sensor_l_ = 0u;
  clear_has_sensor_l();
}
inline ::google::protobuf::uint32 Infrared::sensor_l() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Infrared.sensor_l)
  return sensor_l_;
}
inline void Infrared::set_sensor_l(::google::protobuf::uint32 value) {
  set_has_sensor_l();
  sensor_l_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Infrared.sensor_l)
}

// -------------------------------------------------------------------

// Gyroscope

// required double gyro_x = 1;
inline bool Gyroscope::has_gyro_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gyroscope::set_has_gyro_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gyroscope::clear_has_gyro_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gyroscope::clear_gyro_x() {
  gyro_x_ = 0;
  clear_has_gyro_x();
}
inline double Gyroscope::gyro_x() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Gyroscope.gyro_x)
  return gyro_x_;
}
inline void Gyroscope::set_gyro_x(double value) {
  set_has_gyro_x();
  gyro_x_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Gyroscope.gyro_x)
}

// required double gyro_y = 2;
inline bool Gyroscope::has_gyro_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gyroscope::set_has_gyro_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gyroscope::clear_has_gyro_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gyroscope::clear_gyro_y() {
  gyro_y_ = 0;
  clear_has_gyro_y();
}
inline double Gyroscope::gyro_y() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Gyroscope.gyro_y)
  return gyro_y_;
}
inline void Gyroscope::set_gyro_y(double value) {
  set_has_gyro_y();
  gyro_y_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Gyroscope.gyro_y)
}

// required double gyro_z = 3;
inline bool Gyroscope::has_gyro_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gyroscope::set_has_gyro_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gyroscope::clear_has_gyro_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gyroscope::clear_gyro_z() {
  gyro_z_ = 0;
  clear_has_gyro_z();
}
inline double Gyroscope::gyro_z() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Gyroscope.gyro_z)
  return gyro_z_;
}
inline void Gyroscope::set_gyro_z(double value) {
  set_has_gyro_z();
  gyro_z_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Gyroscope.gyro_z)
}

// -------------------------------------------------------------------

// Encoder_count

// required uint64 left = 1;
inline bool Encoder_count::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Encoder_count::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Encoder_count::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Encoder_count::clear_left() {
  left_ = GOOGLE_ULONGLONG(0);
  clear_has_left();
}
inline ::google::protobuf::uint64 Encoder_count::left() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Encoder_count.left)
  return left_;
}
inline void Encoder_count::set_left(::google::protobuf::uint64 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Encoder_count.left)
}

// required uint64 right = 2;
inline bool Encoder_count::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Encoder_count::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Encoder_count::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Encoder_count::clear_right() {
  right_ = GOOGLE_ULONGLONG(0);
  clear_has_right();
}
inline ::google::protobuf::uint64 Encoder_count::right() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Encoder_count.right)
  return right_;
}
inline void Encoder_count::set_right(::google::protobuf::uint64 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Encoder_count.right)
}

// -------------------------------------------------------------------

// Encoder_speed

// required uint64 left = 1;
inline bool Encoder_speed::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Encoder_speed::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Encoder_speed::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Encoder_speed::clear_left() {
  left_ = GOOGLE_ULONGLONG(0);
  clear_has_left();
}
inline ::google::protobuf::uint64 Encoder_speed::left() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Encoder_speed.left)
  return left_;
}
inline void Encoder_speed::set_left(::google::protobuf::uint64 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Encoder_speed.left)
}

// required uint64 right = 2;
inline bool Encoder_speed::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Encoder_speed::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Encoder_speed::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Encoder_speed::clear_right() {
  right_ = GOOGLE_ULONGLONG(0);
  clear_has_right();
}
inline ::google::protobuf::uint64 Encoder_speed::right() const {
  // @@protoc_insertion_point(field_get:mtg_fms.Encoder_speed.right)
  return right_;
}
inline void Encoder_speed::set_right(::google::protobuf::uint64 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.Encoder_speed.right)
}

// -------------------------------------------------------------------

// LaserScanner

// repeated uint64 values = 1 [packed = true];
inline int LaserScanner::values_size() const {
  return values_.size();
}
inline void LaserScanner::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::uint64 LaserScanner::values(int index) const {
  // @@protoc_insertion_point(field_get:mtg_fms.LaserScanner.values)
  return values_.Get(index);
}
inline void LaserScanner::set_values(int index, ::google::protobuf::uint64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:mtg_fms.LaserScanner.values)
}
inline void LaserScanner::add_values(::google::protobuf::uint64 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:mtg_fms.LaserScanner.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaserScanner::values() const {
  // @@protoc_insertion_point(field_list:mtg_fms.LaserScanner.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaserScanner::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:mtg_fms.LaserScanner.values)
  return &values_;
}

// -------------------------------------------------------------------

// AgentStatus

// required uint64 battery_level = 1;
inline bool AgentStatus::has_battery_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgentStatus::set_has_battery_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgentStatus::clear_has_battery_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgentStatus::clear_battery_level() {
  battery_level_ = GOOGLE_ULONGLONG(0);
  clear_has_battery_level();
}
inline ::google::protobuf::uint64 AgentStatus::battery_level() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AgentStatus.battery_level)
  return battery_level_;
}
inline void AgentStatus::set_battery_level(::google::protobuf::uint64 value) {
  set_has_battery_level();
  battery_level_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AgentStatus.battery_level)
}

// -------------------------------------------------------------------

// AprilTagRot

// required double r11 = 1;
inline bool AprilTagRot::has_r11() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AprilTagRot::set_has_r11() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AprilTagRot::clear_has_r11() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AprilTagRot::clear_r11() {
  r11_ = 0;
  clear_has_r11();
}
inline double AprilTagRot::r11() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r11)
  return r11_;
}
inline void AprilTagRot::set_r11(double value) {
  set_has_r11();
  r11_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r11)
}

// required double r12 = 2;
inline bool AprilTagRot::has_r12() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AprilTagRot::set_has_r12() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AprilTagRot::clear_has_r12() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AprilTagRot::clear_r12() {
  r12_ = 0;
  clear_has_r12();
}
inline double AprilTagRot::r12() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r12)
  return r12_;
}
inline void AprilTagRot::set_r12(double value) {
  set_has_r12();
  r12_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r12)
}

// required double r13 = 3;
inline bool AprilTagRot::has_r13() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AprilTagRot::set_has_r13() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AprilTagRot::clear_has_r13() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AprilTagRot::clear_r13() {
  r13_ = 0;
  clear_has_r13();
}
inline double AprilTagRot::r13() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r13)
  return r13_;
}
inline void AprilTagRot::set_r13(double value) {
  set_has_r13();
  r13_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r13)
}

// required double r21 = 4;
inline bool AprilTagRot::has_r21() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AprilTagRot::set_has_r21() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AprilTagRot::clear_has_r21() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AprilTagRot::clear_r21() {
  r21_ = 0;
  clear_has_r21();
}
inline double AprilTagRot::r21() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r21)
  return r21_;
}
inline void AprilTagRot::set_r21(double value) {
  set_has_r21();
  r21_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r21)
}

// required double r22 = 5;
inline bool AprilTagRot::has_r22() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AprilTagRot::set_has_r22() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AprilTagRot::clear_has_r22() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AprilTagRot::clear_r22() {
  r22_ = 0;
  clear_has_r22();
}
inline double AprilTagRot::r22() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r22)
  return r22_;
}
inline void AprilTagRot::set_r22(double value) {
  set_has_r22();
  r22_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r22)
}

// required double r23 = 6;
inline bool AprilTagRot::has_r23() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AprilTagRot::set_has_r23() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AprilTagRot::clear_has_r23() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AprilTagRot::clear_r23() {
  r23_ = 0;
  clear_has_r23();
}
inline double AprilTagRot::r23() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r23)
  return r23_;
}
inline void AprilTagRot::set_r23(double value) {
  set_has_r23();
  r23_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r23)
}

// required double r31 = 7;
inline bool AprilTagRot::has_r31() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AprilTagRot::set_has_r31() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AprilTagRot::clear_has_r31() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AprilTagRot::clear_r31() {
  r31_ = 0;
  clear_has_r31();
}
inline double AprilTagRot::r31() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r31)
  return r31_;
}
inline void AprilTagRot::set_r31(double value) {
  set_has_r31();
  r31_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r31)
}

// required double r32 = 8;
inline bool AprilTagRot::has_r32() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AprilTagRot::set_has_r32() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AprilTagRot::clear_has_r32() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AprilTagRot::clear_r32() {
  r32_ = 0;
  clear_has_r32();
}
inline double AprilTagRot::r32() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r32)
  return r32_;
}
inline void AprilTagRot::set_r32(double value) {
  set_has_r32();
  r32_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r32)
}

// required double r33 = 9;
inline bool AprilTagRot::has_r33() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AprilTagRot::set_has_r33() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AprilTagRot::clear_has_r33() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AprilTagRot::clear_r33() {
  r33_ = 0;
  clear_has_r33();
}
inline double AprilTagRot::r33() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagRot.r33)
  return r33_;
}
inline void AprilTagRot::set_r33(double value) {
  set_has_r33();
  r33_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagRot.r33)
}

// -------------------------------------------------------------------

// AprilTagTrans

// required double x = 1;
inline bool AprilTagTrans::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AprilTagTrans::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AprilTagTrans::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AprilTagTrans::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double AprilTagTrans::x() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagTrans.x)
  return x_;
}
inline void AprilTagTrans::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagTrans.x)
}

// required double y = 2;
inline bool AprilTagTrans::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AprilTagTrans::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AprilTagTrans::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AprilTagTrans::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double AprilTagTrans::y() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagTrans.y)
  return y_;
}
inline void AprilTagTrans::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagTrans.y)
}

// required double z = 3;
inline bool AprilTagTrans::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AprilTagTrans::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AprilTagTrans::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AprilTagTrans::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double AprilTagTrans::z() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagTrans.z)
  return z_;
}
inline void AprilTagTrans::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagTrans.z)
}

// -------------------------------------------------------------------

// AprilTagPose

// required .mtg_fms.AprilTagRot R = 1;
inline bool AprilTagPose::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AprilTagPose::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AprilTagPose::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AprilTagPose::clear_r() {
  if (r_ != NULL) r_->Clear();
  clear_has_r();
}
inline const ::mtg_fms::AprilTagRot& AprilTagPose::_internal_r() const {
  return *r_;
}
inline const ::mtg_fms::AprilTagRot& AprilTagPose::r() const {
  const ::mtg_fms::AprilTagRot* p = r_;
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagPose.R)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::AprilTagRot*>(
      &::mtg_fms::_AprilTagRot_default_instance_);
}
inline ::mtg_fms::AprilTagRot* AprilTagPose::release_r() {
  // @@protoc_insertion_point(field_release:mtg_fms.AprilTagPose.R)
  clear_has_r();
  ::mtg_fms::AprilTagRot* temp = r_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  r_ = NULL;
  return temp;
}
inline ::mtg_fms::AprilTagRot* AprilTagPose::unsafe_arena_release_r() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.AprilTagPose.R)
  clear_has_r();
  ::mtg_fms::AprilTagRot* temp = r_;
  r_ = NULL;
  return temp;
}
inline ::mtg_fms::AprilTagRot* AprilTagPose::mutable_r() {
  set_has_r();
  if (r_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::AprilTagRot>(GetArenaNoVirtual());
    r_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.AprilTagPose.R)
  return r_;
}
inline void AprilTagPose::set_allocated_r(::mtg_fms::AprilTagRot* r) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete r_;
  }
  if (r) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(r);
    if (message_arena != submessage_arena) {
      r = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, r, submessage_arena);
    }
    set_has_r();
  } else {
    clear_has_r();
  }
  r_ = r;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.AprilTagPose.R)
}

// required .mtg_fms.AprilTagTrans t = 2;
inline bool AprilTagPose::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AprilTagPose::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AprilTagPose::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AprilTagPose::clear_t() {
  if (t_ != NULL) t_->Clear();
  clear_has_t();
}
inline const ::mtg_fms::AprilTagTrans& AprilTagPose::_internal_t() const {
  return *t_;
}
inline const ::mtg_fms::AprilTagTrans& AprilTagPose::t() const {
  const ::mtg_fms::AprilTagTrans* p = t_;
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagPose.t)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::AprilTagTrans*>(
      &::mtg_fms::_AprilTagTrans_default_instance_);
}
inline ::mtg_fms::AprilTagTrans* AprilTagPose::release_t() {
  // @@protoc_insertion_point(field_release:mtg_fms.AprilTagPose.t)
  clear_has_t();
  ::mtg_fms::AprilTagTrans* temp = t_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  t_ = NULL;
  return temp;
}
inline ::mtg_fms::AprilTagTrans* AprilTagPose::unsafe_arena_release_t() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.AprilTagPose.t)
  clear_has_t();
  ::mtg_fms::AprilTagTrans* temp = t_;
  t_ = NULL;
  return temp;
}
inline ::mtg_fms::AprilTagTrans* AprilTagPose::mutable_t() {
  set_has_t();
  if (t_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::AprilTagTrans>(GetArenaNoVirtual());
    t_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.AprilTagPose.t)
  return t_;
}
inline void AprilTagPose::set_allocated_t(::mtg_fms::AprilTagTrans* t) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete t_;
  }
  if (t) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(t);
    if (message_arena != submessage_arena) {
      t = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    set_has_t();
  } else {
    clear_has_t();
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.AprilTagPose.t)
}

// -------------------------------------------------------------------

// AprilTagDetection

// required uint32 tag_id = 1;
inline bool AprilTagDetection::has_tag_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AprilTagDetection::set_has_tag_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AprilTagDetection::clear_has_tag_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AprilTagDetection::clear_tag_id() {
  tag_id_ = 0u;
  clear_has_tag_id();
}
inline ::google::protobuf::uint32 AprilTagDetection::tag_id() const {
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagDetection.tag_id)
  return tag_id_;
}
inline void AprilTagDetection::set_tag_id(::google::protobuf::uint32 value) {
  set_has_tag_id();
  tag_id_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.AprilTagDetection.tag_id)
}

// required .mtg_fms.AprilTagPose pose = 2;
inline bool AprilTagDetection::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AprilTagDetection::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AprilTagDetection::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AprilTagDetection::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  clear_has_pose();
}
inline const ::mtg_fms::AprilTagPose& AprilTagDetection::_internal_pose() const {
  return *pose_;
}
inline const ::mtg_fms::AprilTagPose& AprilTagDetection::pose() const {
  const ::mtg_fms::AprilTagPose* p = pose_;
  // @@protoc_insertion_point(field_get:mtg_fms.AprilTagDetection.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::AprilTagPose*>(
      &::mtg_fms::_AprilTagPose_default_instance_);
}
inline ::mtg_fms::AprilTagPose* AprilTagDetection::release_pose() {
  // @@protoc_insertion_point(field_release:mtg_fms.AprilTagDetection.pose)
  clear_has_pose();
  ::mtg_fms::AprilTagPose* temp = pose_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  pose_ = NULL;
  return temp;
}
inline ::mtg_fms::AprilTagPose* AprilTagDetection::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.AprilTagDetection.pose)
  clear_has_pose();
  ::mtg_fms::AprilTagPose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::mtg_fms::AprilTagPose* AprilTagDetection::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::AprilTagPose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.AprilTagDetection.pose)
  return pose_;
}
inline void AprilTagDetection::set_allocated_pose(::mtg_fms::AprilTagPose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pose_;
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.AprilTagDetection.pose)
}

// -------------------------------------------------------------------

// AllDetections

// repeated .mtg_fms.AprilTagDetection tag_detections = 1;
inline int AllDetections::tag_detections_size() const {
  return tag_detections_.size();
}
inline void AllDetections::clear_tag_detections() {
  tag_detections_.Clear();
}
inline ::mtg_fms::AprilTagDetection* AllDetections::mutable_tag_detections(int index) {
  // @@protoc_insertion_point(field_mutable:mtg_fms.AllDetections.tag_detections)
  return tag_detections_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mtg_fms::AprilTagDetection >*
AllDetections::mutable_tag_detections() {
  // @@protoc_insertion_point(field_mutable_list:mtg_fms.AllDetections.tag_detections)
  return &tag_detections_;
}
inline const ::mtg_fms::AprilTagDetection& AllDetections::tag_detections(int index) const {
  // @@protoc_insertion_point(field_get:mtg_fms.AllDetections.tag_detections)
  return tag_detections_.Get(index);
}
inline ::mtg_fms::AprilTagDetection* AllDetections::add_tag_detections() {
  // @@protoc_insertion_point(field_add:mtg_fms.AllDetections.tag_detections)
  return tag_detections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mtg_fms::AprilTagDetection >&
AllDetections::tag_detections() const {
  // @@protoc_insertion_point(field_list:mtg_fms.AllDetections.tag_detections)
  return tag_detections_;
}

// -------------------------------------------------------------------

// SensorData

// required uint64 timestamp_ns = 1;
inline bool SensorData::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SensorData::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SensorData::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SensorData::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
inline ::google::protobuf::uint64 SensorData::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.timestamp_ns)
  return timestamp_ns_;
}
inline void SensorData::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.SensorData.timestamp_ns)
}

// required uint32 seq_id = 2;
inline bool SensorData::has_seq_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SensorData::set_has_seq_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SensorData::clear_has_seq_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SensorData::clear_seq_id() {
  seq_id_ = 0u;
  clear_has_seq_id();
}
inline ::google::protobuf::uint32 SensorData::seq_id() const {
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.seq_id)
  return seq_id_;
}
inline void SensorData::set_seq_id(::google::protobuf::uint32 value) {
  set_has_seq_id();
  seq_id_ = value;
  // @@protoc_insertion_point(field_set:mtg_fms.SensorData.seq_id)
}

// required .mtg_fms.Accelerometer accel_data = 3;
inline bool SensorData::has_accel_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorData::set_has_accel_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorData::clear_has_accel_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorData::clear_accel_data() {
  if (accel_data_ != NULL) accel_data_->Clear();
  clear_has_accel_data();
}
inline const ::mtg_fms::Accelerometer& SensorData::_internal_accel_data() const {
  return *accel_data_;
}
inline const ::mtg_fms::Accelerometer& SensorData::accel_data() const {
  const ::mtg_fms::Accelerometer* p = accel_data_;
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.accel_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::Accelerometer*>(
      &::mtg_fms::_Accelerometer_default_instance_);
}
inline ::mtg_fms::Accelerometer* SensorData::release_accel_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.accel_data)
  clear_has_accel_data();
  ::mtg_fms::Accelerometer* temp = accel_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  accel_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Accelerometer* SensorData::unsafe_arena_release_accel_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.SensorData.accel_data)
  clear_has_accel_data();
  ::mtg_fms::Accelerometer* temp = accel_data_;
  accel_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Accelerometer* SensorData::mutable_accel_data() {
  set_has_accel_data();
  if (accel_data_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::Accelerometer>(GetArenaNoVirtual());
    accel_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.accel_data)
  return accel_data_;
}
inline void SensorData::set_allocated_accel_data(::mtg_fms::Accelerometer* accel_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accel_data_;
  }
  if (accel_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(accel_data);
    if (message_arena != submessage_arena) {
      accel_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accel_data, submessage_arena);
    }
    set_has_accel_data();
  } else {
    clear_has_accel_data();
  }
  accel_data_ = accel_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.accel_data)
}

// required .mtg_fms.Gyroscope gyro_data = 4;
inline bool SensorData::has_gyro_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorData::set_has_gyro_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorData::clear_has_gyro_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorData::clear_gyro_data() {
  if (gyro_data_ != NULL) gyro_data_->Clear();
  clear_has_gyro_data();
}
inline const ::mtg_fms::Gyroscope& SensorData::_internal_gyro_data() const {
  return *gyro_data_;
}
inline const ::mtg_fms::Gyroscope& SensorData::gyro_data() const {
  const ::mtg_fms::Gyroscope* p = gyro_data_;
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.gyro_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::Gyroscope*>(
      &::mtg_fms::_Gyroscope_default_instance_);
}
inline ::mtg_fms::Gyroscope* SensorData::release_gyro_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.gyro_data)
  clear_has_gyro_data();
  ::mtg_fms::Gyroscope* temp = gyro_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  gyro_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Gyroscope* SensorData::unsafe_arena_release_gyro_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.SensorData.gyro_data)
  clear_has_gyro_data();
  ::mtg_fms::Gyroscope* temp = gyro_data_;
  gyro_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Gyroscope* SensorData::mutable_gyro_data() {
  set_has_gyro_data();
  if (gyro_data_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::Gyroscope>(GetArenaNoVirtual());
    gyro_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.gyro_data)
  return gyro_data_;
}
inline void SensorData::set_allocated_gyro_data(::mtg_fms::Gyroscope* gyro_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gyro_data_;
  }
  if (gyro_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(gyro_data);
    if (message_arena != submessage_arena) {
      gyro_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gyro_data, submessage_arena);
    }
    set_has_gyro_data();
  } else {
    clear_has_gyro_data();
  }
  gyro_data_ = gyro_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.gyro_data)
}

// required .mtg_fms.Encoder_count count_data = 5;
inline bool SensorData::has_count_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorData::set_has_count_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorData::clear_has_count_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorData::clear_count_data() {
  if (count_data_ != NULL) count_data_->Clear();
  clear_has_count_data();
}
inline const ::mtg_fms::Encoder_count& SensorData::_internal_count_data() const {
  return *count_data_;
}
inline const ::mtg_fms::Encoder_count& SensorData::count_data() const {
  const ::mtg_fms::Encoder_count* p = count_data_;
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.count_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::Encoder_count*>(
      &::mtg_fms::_Encoder_count_default_instance_);
}
inline ::mtg_fms::Encoder_count* SensorData::release_count_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.count_data)
  clear_has_count_data();
  ::mtg_fms::Encoder_count* temp = count_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  count_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Encoder_count* SensorData::unsafe_arena_release_count_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.SensorData.count_data)
  clear_has_count_data();
  ::mtg_fms::Encoder_count* temp = count_data_;
  count_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Encoder_count* SensorData::mutable_count_data() {
  set_has_count_data();
  if (count_data_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::Encoder_count>(GetArenaNoVirtual());
    count_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.count_data)
  return count_data_;
}
inline void SensorData::set_allocated_count_data(::mtg_fms::Encoder_count* count_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete count_data_;
  }
  if (count_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(count_data);
    if (message_arena != submessage_arena) {
      count_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, count_data, submessage_arena);
    }
    set_has_count_data();
  } else {
    clear_has_count_data();
  }
  count_data_ = count_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.count_data)
}

// required .mtg_fms.Encoder_speed speed_data = 6;
inline bool SensorData::has_speed_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorData::set_has_speed_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorData::clear_has_speed_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorData::clear_speed_data() {
  if (speed_data_ != NULL) speed_data_->Clear();
  clear_has_speed_data();
}
inline const ::mtg_fms::Encoder_speed& SensorData::_internal_speed_data() const {
  return *speed_data_;
}
inline const ::mtg_fms::Encoder_speed& SensorData::speed_data() const {
  const ::mtg_fms::Encoder_speed* p = speed_data_;
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.speed_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::Encoder_speed*>(
      &::mtg_fms::_Encoder_speed_default_instance_);
}
inline ::mtg_fms::Encoder_speed* SensorData::release_speed_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.speed_data)
  clear_has_speed_data();
  ::mtg_fms::Encoder_speed* temp = speed_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  speed_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Encoder_speed* SensorData::unsafe_arena_release_speed_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.SensorData.speed_data)
  clear_has_speed_data();
  ::mtg_fms::Encoder_speed* temp = speed_data_;
  speed_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Encoder_speed* SensorData::mutable_speed_data() {
  set_has_speed_data();
  if (speed_data_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::Encoder_speed>(GetArenaNoVirtual());
    speed_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.speed_data)
  return speed_data_;
}
inline void SensorData::set_allocated_speed_data(::mtg_fms::Encoder_speed* speed_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete speed_data_;
  }
  if (speed_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(speed_data);
    if (message_arena != submessage_arena) {
      speed_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_data, submessage_arena);
    }
    set_has_speed_data();
  } else {
    clear_has_speed_data();
  }
  speed_data_ = speed_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.speed_data)
}

// required .mtg_fms.Infrared ir_data = 7;
inline bool SensorData::has_ir_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorData::set_has_ir_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SensorData::clear_has_ir_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SensorData::clear_ir_data() {
  if (ir_data_ != NULL) ir_data_->Clear();
  clear_has_ir_data();
}
inline const ::mtg_fms::Infrared& SensorData::_internal_ir_data() const {
  return *ir_data_;
}
inline const ::mtg_fms::Infrared& SensorData::ir_data() const {
  const ::mtg_fms::Infrared* p = ir_data_;
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.ir_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::Infrared*>(
      &::mtg_fms::_Infrared_default_instance_);
}
inline ::mtg_fms::Infrared* SensorData::release_ir_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.ir_data)
  clear_has_ir_data();
  ::mtg_fms::Infrared* temp = ir_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  ir_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Infrared* SensorData::unsafe_arena_release_ir_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.SensorData.ir_data)
  clear_has_ir_data();
  ::mtg_fms::Infrared* temp = ir_data_;
  ir_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Infrared* SensorData::mutable_ir_data() {
  set_has_ir_data();
  if (ir_data_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::Infrared>(GetArenaNoVirtual());
    ir_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.ir_data)
  return ir_data_;
}
inline void SensorData::set_allocated_ir_data(::mtg_fms::Infrared* ir_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ir_data_;
  }
  if (ir_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(ir_data);
    if (message_arena != submessage_arena) {
      ir_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ir_data, submessage_arena);
    }
    set_has_ir_data();
  } else {
    clear_has_ir_data();
  }
  ir_data_ = ir_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.ir_data)
}

// required .mtg_fms.Ultrasonic us_data = 8;
inline bool SensorData::has_us_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorData::set_has_us_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SensorData::clear_has_us_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SensorData::clear_us_data() {
  if (us_data_ != NULL) us_data_->Clear();
  clear_has_us_data();
}
inline const ::mtg_fms::Ultrasonic& SensorData::_internal_us_data() const {
  return *us_data_;
}
inline const ::mtg_fms::Ultrasonic& SensorData::us_data() const {
  const ::mtg_fms::Ultrasonic* p = us_data_;
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.us_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::Ultrasonic*>(
      &::mtg_fms::_Ultrasonic_default_instance_);
}
inline ::mtg_fms::Ultrasonic* SensorData::release_us_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.us_data)
  clear_has_us_data();
  ::mtg_fms::Ultrasonic* temp = us_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  us_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Ultrasonic* SensorData::unsafe_arena_release_us_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.SensorData.us_data)
  clear_has_us_data();
  ::mtg_fms::Ultrasonic* temp = us_data_;
  us_data_ = NULL;
  return temp;
}
inline ::mtg_fms::Ultrasonic* SensorData::mutable_us_data() {
  set_has_us_data();
  if (us_data_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::Ultrasonic>(GetArenaNoVirtual());
    us_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.us_data)
  return us_data_;
}
inline void SensorData::set_allocated_us_data(::mtg_fms::Ultrasonic* us_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete us_data_;
  }
  if (us_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(us_data);
    if (message_arena != submessage_arena) {
      us_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, us_data, submessage_arena);
    }
    set_has_us_data();
  } else {
    clear_has_us_data();
  }
  us_data_ = us_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.us_data)
}

// required .mtg_fms.LaserScanner lrf_data = 9;
inline bool SensorData::has_lrf_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorData::set_has_lrf_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SensorData::clear_has_lrf_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SensorData::clear_lrf_data() {
  if (lrf_data_ != NULL) lrf_data_->Clear();
  clear_has_lrf_data();
}
inline const ::mtg_fms::LaserScanner& SensorData::_internal_lrf_data() const {
  return *lrf_data_;
}
inline const ::mtg_fms::LaserScanner& SensorData::lrf_data() const {
  const ::mtg_fms::LaserScanner* p = lrf_data_;
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.lrf_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::LaserScanner*>(
      &::mtg_fms::_LaserScanner_default_instance_);
}
inline ::mtg_fms::LaserScanner* SensorData::release_lrf_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.lrf_data)
  clear_has_lrf_data();
  ::mtg_fms::LaserScanner* temp = lrf_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  lrf_data_ = NULL;
  return temp;
}
inline ::mtg_fms::LaserScanner* SensorData::unsafe_arena_release_lrf_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.SensorData.lrf_data)
  clear_has_lrf_data();
  ::mtg_fms::LaserScanner* temp = lrf_data_;
  lrf_data_ = NULL;
  return temp;
}
inline ::mtg_fms::LaserScanner* SensorData::mutable_lrf_data() {
  set_has_lrf_data();
  if (lrf_data_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::LaserScanner>(GetArenaNoVirtual());
    lrf_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.lrf_data)
  return lrf_data_;
}
inline void SensorData::set_allocated_lrf_data(::mtg_fms::LaserScanner* lrf_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lrf_data_;
  }
  if (lrf_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(lrf_data);
    if (message_arena != submessage_arena) {
      lrf_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lrf_data, submessage_arena);
    }
    set_has_lrf_data();
  } else {
    clear_has_lrf_data();
  }
  lrf_data_ = lrf_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.lrf_data)
}

// required .mtg_fms.AgentStatus agent_status_data = 10;
inline bool SensorData::has_agent_status_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SensorData::set_has_agent_status_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SensorData::clear_has_agent_status_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SensorData::clear_agent_status_data() {
  if (agent_status_data_ != NULL) agent_status_data_->Clear();
  clear_has_agent_status_data();
}
inline const ::mtg_fms::AgentStatus& SensorData::_internal_agent_status_data() const {
  return *agent_status_data_;
}
inline const ::mtg_fms::AgentStatus& SensorData::agent_status_data() const {
  const ::mtg_fms::AgentStatus* p = agent_status_data_;
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.agent_status_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::AgentStatus*>(
      &::mtg_fms::_AgentStatus_default_instance_);
}
inline ::mtg_fms::AgentStatus* SensorData::release_agent_status_data() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.agent_status_data)
  clear_has_agent_status_data();
  ::mtg_fms::AgentStatus* temp = agent_status_data_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  agent_status_data_ = NULL;
  return temp;
}
inline ::mtg_fms::AgentStatus* SensorData::unsafe_arena_release_agent_status_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.SensorData.agent_status_data)
  clear_has_agent_status_data();
  ::mtg_fms::AgentStatus* temp = agent_status_data_;
  agent_status_data_ = NULL;
  return temp;
}
inline ::mtg_fms::AgentStatus* SensorData::mutable_agent_status_data() {
  set_has_agent_status_data();
  if (agent_status_data_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::AgentStatus>(GetArenaNoVirtual());
    agent_status_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.agent_status_data)
  return agent_status_data_;
}
inline void SensorData::set_allocated_agent_status_data(::mtg_fms::AgentStatus* agent_status_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete agent_status_data_;
  }
  if (agent_status_data) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(agent_status_data);
    if (message_arena != submessage_arena) {
      agent_status_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, agent_status_data, submessage_arena);
    }
    set_has_agent_status_data();
  } else {
    clear_has_agent_status_data();
  }
  agent_status_data_ = agent_status_data;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.agent_status_data)
}

// required .mtg_fms.AllDetections april_detections = 11;
inline bool SensorData::has_april_detections() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SensorData::set_has_april_detections() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SensorData::clear_has_april_detections() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SensorData::clear_april_detections() {
  if (april_detections_ != NULL) april_detections_->Clear();
  clear_has_april_detections();
}
inline const ::mtg_fms::AllDetections& SensorData::_internal_april_detections() const {
  return *april_detections_;
}
inline const ::mtg_fms::AllDetections& SensorData::april_detections() const {
  const ::mtg_fms::AllDetections* p = april_detections_;
  // @@protoc_insertion_point(field_get:mtg_fms.SensorData.april_detections)
  return p != NULL ? *p : *reinterpret_cast<const ::mtg_fms::AllDetections*>(
      &::mtg_fms::_AllDetections_default_instance_);
}
inline ::mtg_fms::AllDetections* SensorData::release_april_detections() {
  // @@protoc_insertion_point(field_release:mtg_fms.SensorData.april_detections)
  clear_has_april_detections();
  ::mtg_fms::AllDetections* temp = april_detections_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  april_detections_ = NULL;
  return temp;
}
inline ::mtg_fms::AllDetections* SensorData::unsafe_arena_release_april_detections() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mtg_fms.SensorData.april_detections)
  clear_has_april_detections();
  ::mtg_fms::AllDetections* temp = april_detections_;
  april_detections_ = NULL;
  return temp;
}
inline ::mtg_fms::AllDetections* SensorData::mutable_april_detections() {
  set_has_april_detections();
  if (april_detections_ == NULL) {
    auto* p = CreateMaybeMessage<::mtg_fms::AllDetections>(GetArenaNoVirtual());
    april_detections_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtg_fms.SensorData.april_detections)
  return april_detections_;
}
inline void SensorData::set_allocated_april_detections(::mtg_fms::AllDetections* april_detections) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete april_detections_;
  }
  if (april_detections) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(april_detections);
    if (message_arena != submessage_arena) {
      april_detections = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, april_detections, submessage_arena);
    }
    set_has_april_detections();
  } else {
    clear_has_april_detections();
  }
  april_detections_ = april_detections;
  // @@protoc_insertion_point(field_set_allocated:mtg_fms.SensorData.april_detections)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mtg_fms

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mtg_2eproto
